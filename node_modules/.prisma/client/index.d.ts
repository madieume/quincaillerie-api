
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Categorie
 * 
 */
export type Categorie = $Result.DefaultSelection<Prisma.$CategoriePayload>
/**
 * Model SousCategorie
 * 
 */
export type SousCategorie = $Result.DefaultSelection<Prisma.$SousCategoriePayload>
/**
 * Model Produit
 * 
 */
export type Produit = $Result.DefaultSelection<Prisma.$ProduitPayload>
/**
 * Model Fournisseur
 * 
 */
export type Fournisseur = $Result.DefaultSelection<Prisma.$FournisseurPayload>
/**
 * Model CommandeFournisseur
 * 
 */
export type CommandeFournisseur = $Result.DefaultSelection<Prisma.$CommandeFournisseurPayload>
/**
 * Model CommandeProduit
 * 
 */
export type CommandeProduit = $Result.DefaultSelection<Prisma.$CommandeProduitPayload>
/**
 * Model Paiement
 * 
 */
export type Paiement = $Result.DefaultSelection<Prisma.$PaiementPayload>
/**
 * Model Utilisateur
 * 
 */
export type Utilisateur = $Result.DefaultSelection<Prisma.$UtilisateurPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const StatutCommande: {
  EN_COURS: 'EN_COURS',
  LIVRE: 'LIVRE',
  PAYE: 'PAYE'
};

export type StatutCommande = (typeof StatutCommande)[keyof typeof StatutCommande]


export const RoleUtilisateur: {
  GESTIONNAIRE: 'GESTIONNAIRE',
  ACHAT: 'ACHAT',
  PAIEMENT: 'PAIEMENT'
};

export type RoleUtilisateur = (typeof RoleUtilisateur)[keyof typeof RoleUtilisateur]

}

export type StatutCommande = $Enums.StatutCommande

export const StatutCommande: typeof $Enums.StatutCommande

export type RoleUtilisateur = $Enums.RoleUtilisateur

export const RoleUtilisateur: typeof $Enums.RoleUtilisateur

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.categorie.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.categorie.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.categorie`: Exposes CRUD operations for the **Categorie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categorie.findMany()
    * ```
    */
  get categorie(): Prisma.CategorieDelegate<ExtArgs>;

  /**
   * `prisma.sousCategorie`: Exposes CRUD operations for the **SousCategorie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SousCategories
    * const sousCategories = await prisma.sousCategorie.findMany()
    * ```
    */
  get sousCategorie(): Prisma.SousCategorieDelegate<ExtArgs>;

  /**
   * `prisma.produit`: Exposes CRUD operations for the **Produit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produits
    * const produits = await prisma.produit.findMany()
    * ```
    */
  get produit(): Prisma.ProduitDelegate<ExtArgs>;

  /**
   * `prisma.fournisseur`: Exposes CRUD operations for the **Fournisseur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fournisseurs
    * const fournisseurs = await prisma.fournisseur.findMany()
    * ```
    */
  get fournisseur(): Prisma.FournisseurDelegate<ExtArgs>;

  /**
   * `prisma.commandeFournisseur`: Exposes CRUD operations for the **CommandeFournisseur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommandeFournisseurs
    * const commandeFournisseurs = await prisma.commandeFournisseur.findMany()
    * ```
    */
  get commandeFournisseur(): Prisma.CommandeFournisseurDelegate<ExtArgs>;

  /**
   * `prisma.commandeProduit`: Exposes CRUD operations for the **CommandeProduit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommandeProduits
    * const commandeProduits = await prisma.commandeProduit.findMany()
    * ```
    */
  get commandeProduit(): Prisma.CommandeProduitDelegate<ExtArgs>;

  /**
   * `prisma.paiement`: Exposes CRUD operations for the **Paiement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paiements
    * const paiements = await prisma.paiement.findMany()
    * ```
    */
  get paiement(): Prisma.PaiementDelegate<ExtArgs>;

  /**
   * `prisma.utilisateur`: Exposes CRUD operations for the **Utilisateur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilisateurs
    * const utilisateurs = await prisma.utilisateur.findMany()
    * ```
    */
  get utilisateur(): Prisma.UtilisateurDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Categorie: 'Categorie',
    SousCategorie: 'SousCategorie',
    Produit: 'Produit',
    Fournisseur: 'Fournisseur',
    CommandeFournisseur: 'CommandeFournisseur',
    CommandeProduit: 'CommandeProduit',
    Paiement: 'Paiement',
    Utilisateur: 'Utilisateur'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "categorie" | "sousCategorie" | "produit" | "fournisseur" | "commandeFournisseur" | "commandeProduit" | "paiement" | "utilisateur"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Categorie: {
        payload: Prisma.$CategoriePayload<ExtArgs>
        fields: Prisma.CategorieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategorieFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategorieFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          findFirst: {
            args: Prisma.CategorieFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategorieFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          findMany: {
            args: Prisma.CategorieFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>[]
          }
          create: {
            args: Prisma.CategorieCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          createMany: {
            args: Prisma.CategorieCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategorieCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>[]
          }
          delete: {
            args: Prisma.CategorieDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          update: {
            args: Prisma.CategorieUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          deleteMany: {
            args: Prisma.CategorieDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategorieUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategorieUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          aggregate: {
            args: Prisma.CategorieAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategorie>
          }
          groupBy: {
            args: Prisma.CategorieGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategorieGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategorieCountArgs<ExtArgs>
            result: $Utils.Optional<CategorieCountAggregateOutputType> | number
          }
        }
      }
      SousCategorie: {
        payload: Prisma.$SousCategoriePayload<ExtArgs>
        fields: Prisma.SousCategorieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SousCategorieFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SousCategoriePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SousCategorieFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SousCategoriePayload>
          }
          findFirst: {
            args: Prisma.SousCategorieFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SousCategoriePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SousCategorieFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SousCategoriePayload>
          }
          findMany: {
            args: Prisma.SousCategorieFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SousCategoriePayload>[]
          }
          create: {
            args: Prisma.SousCategorieCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SousCategoriePayload>
          }
          createMany: {
            args: Prisma.SousCategorieCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SousCategorieCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SousCategoriePayload>[]
          }
          delete: {
            args: Prisma.SousCategorieDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SousCategoriePayload>
          }
          update: {
            args: Prisma.SousCategorieUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SousCategoriePayload>
          }
          deleteMany: {
            args: Prisma.SousCategorieDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SousCategorieUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SousCategorieUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SousCategoriePayload>
          }
          aggregate: {
            args: Prisma.SousCategorieAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSousCategorie>
          }
          groupBy: {
            args: Prisma.SousCategorieGroupByArgs<ExtArgs>
            result: $Utils.Optional<SousCategorieGroupByOutputType>[]
          }
          count: {
            args: Prisma.SousCategorieCountArgs<ExtArgs>
            result: $Utils.Optional<SousCategorieCountAggregateOutputType> | number
          }
        }
      }
      Produit: {
        payload: Prisma.$ProduitPayload<ExtArgs>
        fields: Prisma.ProduitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProduitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProduitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          findFirst: {
            args: Prisma.ProduitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProduitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          findMany: {
            args: Prisma.ProduitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>[]
          }
          create: {
            args: Prisma.ProduitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          createMany: {
            args: Prisma.ProduitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProduitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>[]
          }
          delete: {
            args: Prisma.ProduitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          update: {
            args: Prisma.ProduitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          deleteMany: {
            args: Prisma.ProduitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProduitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProduitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          aggregate: {
            args: Prisma.ProduitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduit>
          }
          groupBy: {
            args: Prisma.ProduitGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProduitGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProduitCountArgs<ExtArgs>
            result: $Utils.Optional<ProduitCountAggregateOutputType> | number
          }
        }
      }
      Fournisseur: {
        payload: Prisma.$FournisseurPayload<ExtArgs>
        fields: Prisma.FournisseurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FournisseurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FournisseurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          findFirst: {
            args: Prisma.FournisseurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FournisseurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          findMany: {
            args: Prisma.FournisseurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>[]
          }
          create: {
            args: Prisma.FournisseurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          createMany: {
            args: Prisma.FournisseurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FournisseurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>[]
          }
          delete: {
            args: Prisma.FournisseurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          update: {
            args: Prisma.FournisseurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          deleteMany: {
            args: Prisma.FournisseurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FournisseurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FournisseurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FournisseurPayload>
          }
          aggregate: {
            args: Prisma.FournisseurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFournisseur>
          }
          groupBy: {
            args: Prisma.FournisseurGroupByArgs<ExtArgs>
            result: $Utils.Optional<FournisseurGroupByOutputType>[]
          }
          count: {
            args: Prisma.FournisseurCountArgs<ExtArgs>
            result: $Utils.Optional<FournisseurCountAggregateOutputType> | number
          }
        }
      }
      CommandeFournisseur: {
        payload: Prisma.$CommandeFournisseurPayload<ExtArgs>
        fields: Prisma.CommandeFournisseurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommandeFournisseurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommandeFournisseurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          findFirst: {
            args: Prisma.CommandeFournisseurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommandeFournisseurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          findMany: {
            args: Prisma.CommandeFournisseurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>[]
          }
          create: {
            args: Prisma.CommandeFournisseurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          createMany: {
            args: Prisma.CommandeFournisseurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommandeFournisseurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>[]
          }
          delete: {
            args: Prisma.CommandeFournisseurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          update: {
            args: Prisma.CommandeFournisseurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          deleteMany: {
            args: Prisma.CommandeFournisseurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommandeFournisseurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommandeFournisseurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeFournisseurPayload>
          }
          aggregate: {
            args: Prisma.CommandeFournisseurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommandeFournisseur>
          }
          groupBy: {
            args: Prisma.CommandeFournisseurGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommandeFournisseurGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommandeFournisseurCountArgs<ExtArgs>
            result: $Utils.Optional<CommandeFournisseurCountAggregateOutputType> | number
          }
        }
      }
      CommandeProduit: {
        payload: Prisma.$CommandeProduitPayload<ExtArgs>
        fields: Prisma.CommandeProduitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommandeProduitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeProduitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommandeProduitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeProduitPayload>
          }
          findFirst: {
            args: Prisma.CommandeProduitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeProduitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommandeProduitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeProduitPayload>
          }
          findMany: {
            args: Prisma.CommandeProduitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeProduitPayload>[]
          }
          create: {
            args: Prisma.CommandeProduitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeProduitPayload>
          }
          createMany: {
            args: Prisma.CommandeProduitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommandeProduitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeProduitPayload>[]
          }
          delete: {
            args: Prisma.CommandeProduitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeProduitPayload>
          }
          update: {
            args: Prisma.CommandeProduitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeProduitPayload>
          }
          deleteMany: {
            args: Prisma.CommandeProduitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommandeProduitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommandeProduitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandeProduitPayload>
          }
          aggregate: {
            args: Prisma.CommandeProduitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommandeProduit>
          }
          groupBy: {
            args: Prisma.CommandeProduitGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommandeProduitGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommandeProduitCountArgs<ExtArgs>
            result: $Utils.Optional<CommandeProduitCountAggregateOutputType> | number
          }
        }
      }
      Paiement: {
        payload: Prisma.$PaiementPayload<ExtArgs>
        fields: Prisma.PaiementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaiementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaiementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          findFirst: {
            args: Prisma.PaiementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaiementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          findMany: {
            args: Prisma.PaiementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>[]
          }
          create: {
            args: Prisma.PaiementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          createMany: {
            args: Prisma.PaiementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaiementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>[]
          }
          delete: {
            args: Prisma.PaiementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          update: {
            args: Prisma.PaiementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          deleteMany: {
            args: Prisma.PaiementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaiementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaiementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          aggregate: {
            args: Prisma.PaiementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaiement>
          }
          groupBy: {
            args: Prisma.PaiementGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaiementGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaiementCountArgs<ExtArgs>
            result: $Utils.Optional<PaiementCountAggregateOutputType> | number
          }
        }
      }
      Utilisateur: {
        payload: Prisma.$UtilisateurPayload<ExtArgs>
        fields: Prisma.UtilisateurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UtilisateurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UtilisateurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findFirst: {
            args: Prisma.UtilisateurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UtilisateurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findMany: {
            args: Prisma.UtilisateurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          create: {
            args: Prisma.UtilisateurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          createMany: {
            args: Prisma.UtilisateurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UtilisateurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          delete: {
            args: Prisma.UtilisateurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          update: {
            args: Prisma.UtilisateurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          deleteMany: {
            args: Prisma.UtilisateurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UtilisateurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UtilisateurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          aggregate: {
            args: Prisma.UtilisateurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUtilisateur>
          }
          groupBy: {
            args: Prisma.UtilisateurGroupByArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurGroupByOutputType>[]
          }
          count: {
            args: Prisma.UtilisateurCountArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategorieCountOutputType
   */

  export type CategorieCountOutputType = {
    sousCategories: number
  }

  export type CategorieCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sousCategories?: boolean | CategorieCountOutputTypeCountSousCategoriesArgs
  }

  // Custom InputTypes
  /**
   * CategorieCountOutputType without action
   */
  export type CategorieCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategorieCountOutputType
     */
    select?: CategorieCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategorieCountOutputType without action
   */
  export type CategorieCountOutputTypeCountSousCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SousCategorieWhereInput
  }


  /**
   * Count Type SousCategorieCountOutputType
   */

  export type SousCategorieCountOutputType = {
    produits: number
  }

  export type SousCategorieCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | SousCategorieCountOutputTypeCountProduitsArgs
  }

  // Custom InputTypes
  /**
   * SousCategorieCountOutputType without action
   */
  export type SousCategorieCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorieCountOutputType
     */
    select?: SousCategorieCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SousCategorieCountOutputType without action
   */
  export type SousCategorieCountOutputTypeCountProduitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProduitWhereInput
  }


  /**
   * Count Type ProduitCountOutputType
   */

  export type ProduitCountOutputType = {
    commandes: number
  }

  export type ProduitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commandes?: boolean | ProduitCountOutputTypeCountCommandesArgs
  }

  // Custom InputTypes
  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProduitCountOutputType
     */
    select?: ProduitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeCountCommandesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandeProduitWhereInput
  }


  /**
   * Count Type FournisseurCountOutputType
   */

  export type FournisseurCountOutputType = {
    commandes: number
  }

  export type FournisseurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commandes?: boolean | FournisseurCountOutputTypeCountCommandesArgs
  }

  // Custom InputTypes
  /**
   * FournisseurCountOutputType without action
   */
  export type FournisseurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FournisseurCountOutputType
     */
    select?: FournisseurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FournisseurCountOutputType without action
   */
  export type FournisseurCountOutputTypeCountCommandesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandeFournisseurWhereInput
  }


  /**
   * Count Type CommandeFournisseurCountOutputType
   */

  export type CommandeFournisseurCountOutputType = {
    produits: number
    paiements: number
  }

  export type CommandeFournisseurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | CommandeFournisseurCountOutputTypeCountProduitsArgs
    paiements?: boolean | CommandeFournisseurCountOutputTypeCountPaiementsArgs
  }

  // Custom InputTypes
  /**
   * CommandeFournisseurCountOutputType without action
   */
  export type CommandeFournisseurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseurCountOutputType
     */
    select?: CommandeFournisseurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommandeFournisseurCountOutputType without action
   */
  export type CommandeFournisseurCountOutputTypeCountProduitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandeProduitWhereInput
  }

  /**
   * CommandeFournisseurCountOutputType without action
   */
  export type CommandeFournisseurCountOutputTypeCountPaiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Categorie
   */

  export type AggregateCategorie = {
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  export type CategorieAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorieSumAggregateOutputType = {
    id: number | null
  }

  export type CategorieMinAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    deletedAt: Date | null
  }

  export type CategorieMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    deletedAt: Date | null
  }

  export type CategorieCountAggregateOutputType = {
    id: number
    nom: number
    description: number
    deletedAt: number
    _all: number
  }


  export type CategorieAvgAggregateInputType = {
    id?: true
  }

  export type CategorieSumAggregateInputType = {
    id?: true
  }

  export type CategorieMinAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    deletedAt?: true
  }

  export type CategorieMaxAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    deletedAt?: true
  }

  export type CategorieCountAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    deletedAt?: true
    _all?: true
  }

  export type CategorieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorie to aggregate.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategorieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategorieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategorieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategorieMaxAggregateInputType
  }

  export type GetCategorieAggregateType<T extends CategorieAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorie[P]>
      : GetScalarType<T[P], AggregateCategorie[P]>
  }




  export type CategorieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategorieWhereInput
    orderBy?: CategorieOrderByWithAggregationInput | CategorieOrderByWithAggregationInput[]
    by: CategorieScalarFieldEnum[] | CategorieScalarFieldEnum
    having?: CategorieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategorieCountAggregateInputType | true
    _avg?: CategorieAvgAggregateInputType
    _sum?: CategorieSumAggregateInputType
    _min?: CategorieMinAggregateInputType
    _max?: CategorieMaxAggregateInputType
  }

  export type CategorieGroupByOutputType = {
    id: number
    nom: string
    description: string | null
    deletedAt: Date | null
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  type GetCategorieGroupByPayload<T extends CategorieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategorieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategorieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategorieGroupByOutputType[P]>
            : GetScalarType<T[P], CategorieGroupByOutputType[P]>
        }
      >
    >


  export type CategorieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    deletedAt?: boolean
    sousCategories?: boolean | Categorie$sousCategoriesArgs<ExtArgs>
    _count?: boolean | CategorieCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categorie"]>

  export type CategorieSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["categorie"]>

  export type CategorieSelectScalar = {
    id?: boolean
    nom?: boolean
    description?: boolean
    deletedAt?: boolean
  }

  export type CategorieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sousCategories?: boolean | Categorie$sousCategoriesArgs<ExtArgs>
    _count?: boolean | CategorieCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategorieIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoriePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categorie"
    objects: {
      sousCategories: Prisma.$SousCategoriePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      description: string | null
      deletedAt: Date | null
    }, ExtArgs["result"]["categorie"]>
    composites: {}
  }

  type CategorieGetPayload<S extends boolean | null | undefined | CategorieDefaultArgs> = $Result.GetResult<Prisma.$CategoriePayload, S>

  type CategorieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategorieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategorieCountAggregateInputType | true
    }

  export interface CategorieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categorie'], meta: { name: 'Categorie' } }
    /**
     * Find zero or one Categorie that matches the filter.
     * @param {CategorieFindUniqueArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategorieFindUniqueArgs>(args: SelectSubset<T, CategorieFindUniqueArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categorie that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategorieFindUniqueOrThrowArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategorieFindUniqueOrThrowArgs>(args: SelectSubset<T, CategorieFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categorie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindFirstArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategorieFindFirstArgs>(args?: SelectSubset<T, CategorieFindFirstArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categorie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindFirstOrThrowArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategorieFindFirstOrThrowArgs>(args?: SelectSubset<T, CategorieFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categorie.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categorie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categorieWithIdOnly = await prisma.categorie.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategorieFindManyArgs>(args?: SelectSubset<T, CategorieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categorie.
     * @param {CategorieCreateArgs} args - Arguments to create a Categorie.
     * @example
     * // Create one Categorie
     * const Categorie = await prisma.categorie.create({
     *   data: {
     *     // ... data to create a Categorie
     *   }
     * })
     * 
     */
    create<T extends CategorieCreateArgs>(args: SelectSubset<T, CategorieCreateArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategorieCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const categorie = await prisma.categorie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategorieCreateManyArgs>(args?: SelectSubset<T, CategorieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategorieCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const categorie = await prisma.categorie.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categorieWithIdOnly = await prisma.categorie.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategorieCreateManyAndReturnArgs>(args?: SelectSubset<T, CategorieCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Categorie.
     * @param {CategorieDeleteArgs} args - Arguments to delete one Categorie.
     * @example
     * // Delete one Categorie
     * const Categorie = await prisma.categorie.delete({
     *   where: {
     *     // ... filter to delete one Categorie
     *   }
     * })
     * 
     */
    delete<T extends CategorieDeleteArgs>(args: SelectSubset<T, CategorieDeleteArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categorie.
     * @param {CategorieUpdateArgs} args - Arguments to update one Categorie.
     * @example
     * // Update one Categorie
     * const categorie = await prisma.categorie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategorieUpdateArgs>(args: SelectSubset<T, CategorieUpdateArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategorieDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categorie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategorieDeleteManyArgs>(args?: SelectSubset<T, CategorieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categorie = await prisma.categorie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategorieUpdateManyArgs>(args: SelectSubset<T, CategorieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categorie.
     * @param {CategorieUpsertArgs} args - Arguments to update or create a Categorie.
     * @example
     * // Update or create a Categorie
     * const categorie = await prisma.categorie.upsert({
     *   create: {
     *     // ... data to create a Categorie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorie we want to update
     *   }
     * })
     */
    upsert<T extends CategorieUpsertArgs>(args: SelectSubset<T, CategorieUpsertArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categorie.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategorieCountArgs>(
      args?: Subset<T, CategorieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategorieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategorieAggregateArgs>(args: Subset<T, CategorieAggregateArgs>): Prisma.PrismaPromise<GetCategorieAggregateType<T>>

    /**
     * Group by Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategorieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategorieGroupByArgs['orderBy'] }
        : { orderBy?: CategorieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategorieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategorieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categorie model
   */
  readonly fields: CategorieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categorie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategorieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sousCategories<T extends Categorie$sousCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Categorie$sousCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categorie model
   */ 
  interface CategorieFieldRefs {
    readonly id: FieldRef<"Categorie", 'Int'>
    readonly nom: FieldRef<"Categorie", 'String'>
    readonly description: FieldRef<"Categorie", 'String'>
    readonly deletedAt: FieldRef<"Categorie", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Categorie findUnique
   */
  export type CategorieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie findUniqueOrThrow
   */
  export type CategorieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie findFirst
   */
  export type CategorieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }

  /**
   * Categorie findFirstOrThrow
   */
  export type CategorieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }

  /**
   * Categorie findMany
   */
  export type CategorieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }

  /**
   * Categorie create
   */
  export type CategorieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The data needed to create a Categorie.
     */
    data: XOR<CategorieCreateInput, CategorieUncheckedCreateInput>
  }

  /**
   * Categorie createMany
   */
  export type CategorieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategorieCreateManyInput | CategorieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categorie createManyAndReturn
   */
  export type CategorieCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategorieCreateManyInput | CategorieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categorie update
   */
  export type CategorieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The data needed to update a Categorie.
     */
    data: XOR<CategorieUpdateInput, CategorieUncheckedUpdateInput>
    /**
     * Choose, which Categorie to update.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie updateMany
   */
  export type CategorieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategorieUpdateManyMutationInput, CategorieUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategorieWhereInput
  }

  /**
   * Categorie upsert
   */
  export type CategorieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The filter to search for the Categorie to update in case it exists.
     */
    where: CategorieWhereUniqueInput
    /**
     * In case the Categorie found by the `where` argument doesn't exist, create a new Categorie with this data.
     */
    create: XOR<CategorieCreateInput, CategorieUncheckedCreateInput>
    /**
     * In case the Categorie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategorieUpdateInput, CategorieUncheckedUpdateInput>
  }

  /**
   * Categorie delete
   */
  export type CategorieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter which Categorie to delete.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie deleteMany
   */
  export type CategorieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategorieWhereInput
  }

  /**
   * Categorie.sousCategories
   */
  export type Categorie$sousCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieInclude<ExtArgs> | null
    where?: SousCategorieWhereInput
    orderBy?: SousCategorieOrderByWithRelationInput | SousCategorieOrderByWithRelationInput[]
    cursor?: SousCategorieWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SousCategorieScalarFieldEnum | SousCategorieScalarFieldEnum[]
  }

  /**
   * Categorie without action
   */
  export type CategorieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategorieInclude<ExtArgs> | null
  }


  /**
   * Model SousCategorie
   */

  export type AggregateSousCategorie = {
    _count: SousCategorieCountAggregateOutputType | null
    _avg: SousCategorieAvgAggregateOutputType | null
    _sum: SousCategorieSumAggregateOutputType | null
    _min: SousCategorieMinAggregateOutputType | null
    _max: SousCategorieMaxAggregateOutputType | null
  }

  export type SousCategorieAvgAggregateOutputType = {
    id: number | null
    categorieId: number | null
  }

  export type SousCategorieSumAggregateOutputType = {
    id: number | null
    categorieId: number | null
  }

  export type SousCategorieMinAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    deletedAt: Date | null
    categorieId: number | null
  }

  export type SousCategorieMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
    deletedAt: Date | null
    categorieId: number | null
  }

  export type SousCategorieCountAggregateOutputType = {
    id: number
    nom: number
    description: number
    deletedAt: number
    categorieId: number
    _all: number
  }


  export type SousCategorieAvgAggregateInputType = {
    id?: true
    categorieId?: true
  }

  export type SousCategorieSumAggregateInputType = {
    id?: true
    categorieId?: true
  }

  export type SousCategorieMinAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    deletedAt?: true
    categorieId?: true
  }

  export type SousCategorieMaxAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    deletedAt?: true
    categorieId?: true
  }

  export type SousCategorieCountAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    deletedAt?: true
    categorieId?: true
    _all?: true
  }

  export type SousCategorieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SousCategorie to aggregate.
     */
    where?: SousCategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SousCategories to fetch.
     */
    orderBy?: SousCategorieOrderByWithRelationInput | SousCategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SousCategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SousCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SousCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SousCategories
    **/
    _count?: true | SousCategorieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SousCategorieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SousCategorieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SousCategorieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SousCategorieMaxAggregateInputType
  }

  export type GetSousCategorieAggregateType<T extends SousCategorieAggregateArgs> = {
        [P in keyof T & keyof AggregateSousCategorie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSousCategorie[P]>
      : GetScalarType<T[P], AggregateSousCategorie[P]>
  }




  export type SousCategorieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SousCategorieWhereInput
    orderBy?: SousCategorieOrderByWithAggregationInput | SousCategorieOrderByWithAggregationInput[]
    by: SousCategorieScalarFieldEnum[] | SousCategorieScalarFieldEnum
    having?: SousCategorieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SousCategorieCountAggregateInputType | true
    _avg?: SousCategorieAvgAggregateInputType
    _sum?: SousCategorieSumAggregateInputType
    _min?: SousCategorieMinAggregateInputType
    _max?: SousCategorieMaxAggregateInputType
  }

  export type SousCategorieGroupByOutputType = {
    id: number
    nom: string
    description: string | null
    deletedAt: Date | null
    categorieId: number
    _count: SousCategorieCountAggregateOutputType | null
    _avg: SousCategorieAvgAggregateOutputType | null
    _sum: SousCategorieSumAggregateOutputType | null
    _min: SousCategorieMinAggregateOutputType | null
    _max: SousCategorieMaxAggregateOutputType | null
  }

  type GetSousCategorieGroupByPayload<T extends SousCategorieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SousCategorieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SousCategorieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SousCategorieGroupByOutputType[P]>
            : GetScalarType<T[P], SousCategorieGroupByOutputType[P]>
        }
      >
    >


  export type SousCategorieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    deletedAt?: boolean
    categorieId?: boolean
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    produits?: boolean | SousCategorie$produitsArgs<ExtArgs>
    _count?: boolean | SousCategorieCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sousCategorie"]>

  export type SousCategorieSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    deletedAt?: boolean
    categorieId?: boolean
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sousCategorie"]>

  export type SousCategorieSelectScalar = {
    id?: boolean
    nom?: boolean
    description?: boolean
    deletedAt?: boolean
    categorieId?: boolean
  }

  export type SousCategorieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    produits?: boolean | SousCategorie$produitsArgs<ExtArgs>
    _count?: boolean | SousCategorieCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SousCategorieIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
  }

  export type $SousCategoriePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SousCategorie"
    objects: {
      categorie: Prisma.$CategoriePayload<ExtArgs>
      produits: Prisma.$ProduitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      description: string | null
      deletedAt: Date | null
      categorieId: number
    }, ExtArgs["result"]["sousCategorie"]>
    composites: {}
  }

  type SousCategorieGetPayload<S extends boolean | null | undefined | SousCategorieDefaultArgs> = $Result.GetResult<Prisma.$SousCategoriePayload, S>

  type SousCategorieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SousCategorieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SousCategorieCountAggregateInputType | true
    }

  export interface SousCategorieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SousCategorie'], meta: { name: 'SousCategorie' } }
    /**
     * Find zero or one SousCategorie that matches the filter.
     * @param {SousCategorieFindUniqueArgs} args - Arguments to find a SousCategorie
     * @example
     * // Get one SousCategorie
     * const sousCategorie = await prisma.sousCategorie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SousCategorieFindUniqueArgs>(args: SelectSubset<T, SousCategorieFindUniqueArgs<ExtArgs>>): Prisma__SousCategorieClient<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SousCategorie that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SousCategorieFindUniqueOrThrowArgs} args - Arguments to find a SousCategorie
     * @example
     * // Get one SousCategorie
     * const sousCategorie = await prisma.sousCategorie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SousCategorieFindUniqueOrThrowArgs>(args: SelectSubset<T, SousCategorieFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SousCategorieClient<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SousCategorie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SousCategorieFindFirstArgs} args - Arguments to find a SousCategorie
     * @example
     * // Get one SousCategorie
     * const sousCategorie = await prisma.sousCategorie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SousCategorieFindFirstArgs>(args?: SelectSubset<T, SousCategorieFindFirstArgs<ExtArgs>>): Prisma__SousCategorieClient<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SousCategorie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SousCategorieFindFirstOrThrowArgs} args - Arguments to find a SousCategorie
     * @example
     * // Get one SousCategorie
     * const sousCategorie = await prisma.sousCategorie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SousCategorieFindFirstOrThrowArgs>(args?: SelectSubset<T, SousCategorieFindFirstOrThrowArgs<ExtArgs>>): Prisma__SousCategorieClient<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SousCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SousCategorieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SousCategories
     * const sousCategories = await prisma.sousCategorie.findMany()
     * 
     * // Get first 10 SousCategories
     * const sousCategories = await prisma.sousCategorie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sousCategorieWithIdOnly = await prisma.sousCategorie.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SousCategorieFindManyArgs>(args?: SelectSubset<T, SousCategorieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SousCategorie.
     * @param {SousCategorieCreateArgs} args - Arguments to create a SousCategorie.
     * @example
     * // Create one SousCategorie
     * const SousCategorie = await prisma.sousCategorie.create({
     *   data: {
     *     // ... data to create a SousCategorie
     *   }
     * })
     * 
     */
    create<T extends SousCategorieCreateArgs>(args: SelectSubset<T, SousCategorieCreateArgs<ExtArgs>>): Prisma__SousCategorieClient<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SousCategories.
     * @param {SousCategorieCreateManyArgs} args - Arguments to create many SousCategories.
     * @example
     * // Create many SousCategories
     * const sousCategorie = await prisma.sousCategorie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SousCategorieCreateManyArgs>(args?: SelectSubset<T, SousCategorieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SousCategories and returns the data saved in the database.
     * @param {SousCategorieCreateManyAndReturnArgs} args - Arguments to create many SousCategories.
     * @example
     * // Create many SousCategories
     * const sousCategorie = await prisma.sousCategorie.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SousCategories and only return the `id`
     * const sousCategorieWithIdOnly = await prisma.sousCategorie.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SousCategorieCreateManyAndReturnArgs>(args?: SelectSubset<T, SousCategorieCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SousCategorie.
     * @param {SousCategorieDeleteArgs} args - Arguments to delete one SousCategorie.
     * @example
     * // Delete one SousCategorie
     * const SousCategorie = await prisma.sousCategorie.delete({
     *   where: {
     *     // ... filter to delete one SousCategorie
     *   }
     * })
     * 
     */
    delete<T extends SousCategorieDeleteArgs>(args: SelectSubset<T, SousCategorieDeleteArgs<ExtArgs>>): Prisma__SousCategorieClient<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SousCategorie.
     * @param {SousCategorieUpdateArgs} args - Arguments to update one SousCategorie.
     * @example
     * // Update one SousCategorie
     * const sousCategorie = await prisma.sousCategorie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SousCategorieUpdateArgs>(args: SelectSubset<T, SousCategorieUpdateArgs<ExtArgs>>): Prisma__SousCategorieClient<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SousCategories.
     * @param {SousCategorieDeleteManyArgs} args - Arguments to filter SousCategories to delete.
     * @example
     * // Delete a few SousCategories
     * const { count } = await prisma.sousCategorie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SousCategorieDeleteManyArgs>(args?: SelectSubset<T, SousCategorieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SousCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SousCategorieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SousCategories
     * const sousCategorie = await prisma.sousCategorie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SousCategorieUpdateManyArgs>(args: SelectSubset<T, SousCategorieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SousCategorie.
     * @param {SousCategorieUpsertArgs} args - Arguments to update or create a SousCategorie.
     * @example
     * // Update or create a SousCategorie
     * const sousCategorie = await prisma.sousCategorie.upsert({
     *   create: {
     *     // ... data to create a SousCategorie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SousCategorie we want to update
     *   }
     * })
     */
    upsert<T extends SousCategorieUpsertArgs>(args: SelectSubset<T, SousCategorieUpsertArgs<ExtArgs>>): Prisma__SousCategorieClient<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SousCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SousCategorieCountArgs} args - Arguments to filter SousCategories to count.
     * @example
     * // Count the number of SousCategories
     * const count = await prisma.sousCategorie.count({
     *   where: {
     *     // ... the filter for the SousCategories we want to count
     *   }
     * })
    **/
    count<T extends SousCategorieCountArgs>(
      args?: Subset<T, SousCategorieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SousCategorieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SousCategorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SousCategorieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SousCategorieAggregateArgs>(args: Subset<T, SousCategorieAggregateArgs>): Prisma.PrismaPromise<GetSousCategorieAggregateType<T>>

    /**
     * Group by SousCategorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SousCategorieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SousCategorieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SousCategorieGroupByArgs['orderBy'] }
        : { orderBy?: SousCategorieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SousCategorieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSousCategorieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SousCategorie model
   */
  readonly fields: SousCategorieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SousCategorie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SousCategorieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categorie<T extends CategorieDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategorieDefaultArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    produits<T extends SousCategorie$produitsArgs<ExtArgs> = {}>(args?: Subset<T, SousCategorie$produitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SousCategorie model
   */ 
  interface SousCategorieFieldRefs {
    readonly id: FieldRef<"SousCategorie", 'Int'>
    readonly nom: FieldRef<"SousCategorie", 'String'>
    readonly description: FieldRef<"SousCategorie", 'String'>
    readonly deletedAt: FieldRef<"SousCategorie", 'DateTime'>
    readonly categorieId: FieldRef<"SousCategorie", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SousCategorie findUnique
   */
  export type SousCategorieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieInclude<ExtArgs> | null
    /**
     * Filter, which SousCategorie to fetch.
     */
    where: SousCategorieWhereUniqueInput
  }

  /**
   * SousCategorie findUniqueOrThrow
   */
  export type SousCategorieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieInclude<ExtArgs> | null
    /**
     * Filter, which SousCategorie to fetch.
     */
    where: SousCategorieWhereUniqueInput
  }

  /**
   * SousCategorie findFirst
   */
  export type SousCategorieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieInclude<ExtArgs> | null
    /**
     * Filter, which SousCategorie to fetch.
     */
    where?: SousCategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SousCategories to fetch.
     */
    orderBy?: SousCategorieOrderByWithRelationInput | SousCategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SousCategories.
     */
    cursor?: SousCategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SousCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SousCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SousCategories.
     */
    distinct?: SousCategorieScalarFieldEnum | SousCategorieScalarFieldEnum[]
  }

  /**
   * SousCategorie findFirstOrThrow
   */
  export type SousCategorieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieInclude<ExtArgs> | null
    /**
     * Filter, which SousCategorie to fetch.
     */
    where?: SousCategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SousCategories to fetch.
     */
    orderBy?: SousCategorieOrderByWithRelationInput | SousCategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SousCategories.
     */
    cursor?: SousCategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SousCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SousCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SousCategories.
     */
    distinct?: SousCategorieScalarFieldEnum | SousCategorieScalarFieldEnum[]
  }

  /**
   * SousCategorie findMany
   */
  export type SousCategorieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieInclude<ExtArgs> | null
    /**
     * Filter, which SousCategories to fetch.
     */
    where?: SousCategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SousCategories to fetch.
     */
    orderBy?: SousCategorieOrderByWithRelationInput | SousCategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SousCategories.
     */
    cursor?: SousCategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SousCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SousCategories.
     */
    skip?: number
    distinct?: SousCategorieScalarFieldEnum | SousCategorieScalarFieldEnum[]
  }

  /**
   * SousCategorie create
   */
  export type SousCategorieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieInclude<ExtArgs> | null
    /**
     * The data needed to create a SousCategorie.
     */
    data: XOR<SousCategorieCreateInput, SousCategorieUncheckedCreateInput>
  }

  /**
   * SousCategorie createMany
   */
  export type SousCategorieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SousCategories.
     */
    data: SousCategorieCreateManyInput | SousCategorieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SousCategorie createManyAndReturn
   */
  export type SousCategorieCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SousCategories.
     */
    data: SousCategorieCreateManyInput | SousCategorieCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SousCategorie update
   */
  export type SousCategorieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieInclude<ExtArgs> | null
    /**
     * The data needed to update a SousCategorie.
     */
    data: XOR<SousCategorieUpdateInput, SousCategorieUncheckedUpdateInput>
    /**
     * Choose, which SousCategorie to update.
     */
    where: SousCategorieWhereUniqueInput
  }

  /**
   * SousCategorie updateMany
   */
  export type SousCategorieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SousCategories.
     */
    data: XOR<SousCategorieUpdateManyMutationInput, SousCategorieUncheckedUpdateManyInput>
    /**
     * Filter which SousCategories to update
     */
    where?: SousCategorieWhereInput
  }

  /**
   * SousCategorie upsert
   */
  export type SousCategorieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieInclude<ExtArgs> | null
    /**
     * The filter to search for the SousCategorie to update in case it exists.
     */
    where: SousCategorieWhereUniqueInput
    /**
     * In case the SousCategorie found by the `where` argument doesn't exist, create a new SousCategorie with this data.
     */
    create: XOR<SousCategorieCreateInput, SousCategorieUncheckedCreateInput>
    /**
     * In case the SousCategorie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SousCategorieUpdateInput, SousCategorieUncheckedUpdateInput>
  }

  /**
   * SousCategorie delete
   */
  export type SousCategorieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieInclude<ExtArgs> | null
    /**
     * Filter which SousCategorie to delete.
     */
    where: SousCategorieWhereUniqueInput
  }

  /**
   * SousCategorie deleteMany
   */
  export type SousCategorieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SousCategories to delete
     */
    where?: SousCategorieWhereInput
  }

  /**
   * SousCategorie.produits
   */
  export type SousCategorie$produitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    where?: ProduitWhereInput
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    cursor?: ProduitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * SousCategorie without action
   */
  export type SousCategorieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SousCategorie
     */
    select?: SousCategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SousCategorieInclude<ExtArgs> | null
  }


  /**
   * Model Produit
   */

  export type AggregateProduit = {
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  export type ProduitAvgAggregateOutputType = {
    id: number | null
    stock: number | null
    prixUnitaire: number | null
    sousCategorieId: number | null
  }

  export type ProduitSumAggregateOutputType = {
    id: number | null
    stock: number | null
    prixUnitaire: number | null
    sousCategorieId: number | null
  }

  export type ProduitMinAggregateOutputType = {
    id: number | null
    code: string | null
    designation: string | null
    stock: number | null
    prixUnitaire: number | null
    image: string | null
    deletedAt: Date | null
    sousCategorieId: number | null
  }

  export type ProduitMaxAggregateOutputType = {
    id: number | null
    code: string | null
    designation: string | null
    stock: number | null
    prixUnitaire: number | null
    image: string | null
    deletedAt: Date | null
    sousCategorieId: number | null
  }

  export type ProduitCountAggregateOutputType = {
    id: number
    code: number
    designation: number
    stock: number
    prixUnitaire: number
    image: number
    deletedAt: number
    sousCategorieId: number
    _all: number
  }


  export type ProduitAvgAggregateInputType = {
    id?: true
    stock?: true
    prixUnitaire?: true
    sousCategorieId?: true
  }

  export type ProduitSumAggregateInputType = {
    id?: true
    stock?: true
    prixUnitaire?: true
    sousCategorieId?: true
  }

  export type ProduitMinAggregateInputType = {
    id?: true
    code?: true
    designation?: true
    stock?: true
    prixUnitaire?: true
    image?: true
    deletedAt?: true
    sousCategorieId?: true
  }

  export type ProduitMaxAggregateInputType = {
    id?: true
    code?: true
    designation?: true
    stock?: true
    prixUnitaire?: true
    image?: true
    deletedAt?: true
    sousCategorieId?: true
  }

  export type ProduitCountAggregateInputType = {
    id?: true
    code?: true
    designation?: true
    stock?: true
    prixUnitaire?: true
    image?: true
    deletedAt?: true
    sousCategorieId?: true
    _all?: true
  }

  export type ProduitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produit to aggregate.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produits
    **/
    _count?: true | ProduitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProduitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProduitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProduitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProduitMaxAggregateInputType
  }

  export type GetProduitAggregateType<T extends ProduitAggregateArgs> = {
        [P in keyof T & keyof AggregateProduit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduit[P]>
      : GetScalarType<T[P], AggregateProduit[P]>
  }




  export type ProduitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProduitWhereInput
    orderBy?: ProduitOrderByWithAggregationInput | ProduitOrderByWithAggregationInput[]
    by: ProduitScalarFieldEnum[] | ProduitScalarFieldEnum
    having?: ProduitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProduitCountAggregateInputType | true
    _avg?: ProduitAvgAggregateInputType
    _sum?: ProduitSumAggregateInputType
    _min?: ProduitMinAggregateInputType
    _max?: ProduitMaxAggregateInputType
  }

  export type ProduitGroupByOutputType = {
    id: number
    code: string
    designation: string
    stock: number
    prixUnitaire: number
    image: string | null
    deletedAt: Date | null
    sousCategorieId: number
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  type GetProduitGroupByPayload<T extends ProduitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProduitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProduitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProduitGroupByOutputType[P]>
            : GetScalarType<T[P], ProduitGroupByOutputType[P]>
        }
      >
    >


  export type ProduitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    designation?: boolean
    stock?: boolean
    prixUnitaire?: boolean
    image?: boolean
    deletedAt?: boolean
    sousCategorieId?: boolean
    sousCategorie?: boolean | SousCategorieDefaultArgs<ExtArgs>
    commandes?: boolean | Produit$commandesArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produit"]>

  export type ProduitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    designation?: boolean
    stock?: boolean
    prixUnitaire?: boolean
    image?: boolean
    deletedAt?: boolean
    sousCategorieId?: boolean
    sousCategorie?: boolean | SousCategorieDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produit"]>

  export type ProduitSelectScalar = {
    id?: boolean
    code?: boolean
    designation?: boolean
    stock?: boolean
    prixUnitaire?: boolean
    image?: boolean
    deletedAt?: boolean
    sousCategorieId?: boolean
  }

  export type ProduitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sousCategorie?: boolean | SousCategorieDefaultArgs<ExtArgs>
    commandes?: boolean | Produit$commandesArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProduitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sousCategorie?: boolean | SousCategorieDefaultArgs<ExtArgs>
  }

  export type $ProduitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produit"
    objects: {
      sousCategorie: Prisma.$SousCategoriePayload<ExtArgs>
      commandes: Prisma.$CommandeProduitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      designation: string
      stock: number
      prixUnitaire: number
      image: string | null
      deletedAt: Date | null
      sousCategorieId: number
    }, ExtArgs["result"]["produit"]>
    composites: {}
  }

  type ProduitGetPayload<S extends boolean | null | undefined | ProduitDefaultArgs> = $Result.GetResult<Prisma.$ProduitPayload, S>

  type ProduitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProduitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProduitCountAggregateInputType | true
    }

  export interface ProduitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produit'], meta: { name: 'Produit' } }
    /**
     * Find zero or one Produit that matches the filter.
     * @param {ProduitFindUniqueArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProduitFindUniqueArgs>(args: SelectSubset<T, ProduitFindUniqueArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Produit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProduitFindUniqueOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProduitFindUniqueOrThrowArgs>(args: SelectSubset<T, ProduitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Produit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindFirstArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProduitFindFirstArgs>(args?: SelectSubset<T, ProduitFindFirstArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Produit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindFirstOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProduitFindFirstOrThrowArgs>(args?: SelectSubset<T, ProduitFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Produits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produits
     * const produits = await prisma.produit.findMany()
     * 
     * // Get first 10 Produits
     * const produits = await prisma.produit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produitWithIdOnly = await prisma.produit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProduitFindManyArgs>(args?: SelectSubset<T, ProduitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Produit.
     * @param {ProduitCreateArgs} args - Arguments to create a Produit.
     * @example
     * // Create one Produit
     * const Produit = await prisma.produit.create({
     *   data: {
     *     // ... data to create a Produit
     *   }
     * })
     * 
     */
    create<T extends ProduitCreateArgs>(args: SelectSubset<T, ProduitCreateArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Produits.
     * @param {ProduitCreateManyArgs} args - Arguments to create many Produits.
     * @example
     * // Create many Produits
     * const produit = await prisma.produit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProduitCreateManyArgs>(args?: SelectSubset<T, ProduitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Produits and returns the data saved in the database.
     * @param {ProduitCreateManyAndReturnArgs} args - Arguments to create many Produits.
     * @example
     * // Create many Produits
     * const produit = await prisma.produit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Produits and only return the `id`
     * const produitWithIdOnly = await prisma.produit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProduitCreateManyAndReturnArgs>(args?: SelectSubset<T, ProduitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Produit.
     * @param {ProduitDeleteArgs} args - Arguments to delete one Produit.
     * @example
     * // Delete one Produit
     * const Produit = await prisma.produit.delete({
     *   where: {
     *     // ... filter to delete one Produit
     *   }
     * })
     * 
     */
    delete<T extends ProduitDeleteArgs>(args: SelectSubset<T, ProduitDeleteArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Produit.
     * @param {ProduitUpdateArgs} args - Arguments to update one Produit.
     * @example
     * // Update one Produit
     * const produit = await prisma.produit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProduitUpdateArgs>(args: SelectSubset<T, ProduitUpdateArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Produits.
     * @param {ProduitDeleteManyArgs} args - Arguments to filter Produits to delete.
     * @example
     * // Delete a few Produits
     * const { count } = await prisma.produit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProduitDeleteManyArgs>(args?: SelectSubset<T, ProduitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produits
     * const produit = await prisma.produit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProduitUpdateManyArgs>(args: SelectSubset<T, ProduitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produit.
     * @param {ProduitUpsertArgs} args - Arguments to update or create a Produit.
     * @example
     * // Update or create a Produit
     * const produit = await prisma.produit.upsert({
     *   create: {
     *     // ... data to create a Produit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produit we want to update
     *   }
     * })
     */
    upsert<T extends ProduitUpsertArgs>(args: SelectSubset<T, ProduitUpsertArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitCountArgs} args - Arguments to filter Produits to count.
     * @example
     * // Count the number of Produits
     * const count = await prisma.produit.count({
     *   where: {
     *     // ... the filter for the Produits we want to count
     *   }
     * })
    **/
    count<T extends ProduitCountArgs>(
      args?: Subset<T, ProduitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProduitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProduitAggregateArgs>(args: Subset<T, ProduitAggregateArgs>): Prisma.PrismaPromise<GetProduitAggregateType<T>>

    /**
     * Group by Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProduitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProduitGroupByArgs['orderBy'] }
        : { orderBy?: ProduitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProduitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produit model
   */
  readonly fields: ProduitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProduitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sousCategorie<T extends SousCategorieDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SousCategorieDefaultArgs<ExtArgs>>): Prisma__SousCategorieClient<$Result.GetResult<Prisma.$SousCategoriePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    commandes<T extends Produit$commandesArgs<ExtArgs> = {}>(args?: Subset<T, Produit$commandesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produit model
   */ 
  interface ProduitFieldRefs {
    readonly id: FieldRef<"Produit", 'Int'>
    readonly code: FieldRef<"Produit", 'String'>
    readonly designation: FieldRef<"Produit", 'String'>
    readonly stock: FieldRef<"Produit", 'Int'>
    readonly prixUnitaire: FieldRef<"Produit", 'Float'>
    readonly image: FieldRef<"Produit", 'String'>
    readonly deletedAt: FieldRef<"Produit", 'DateTime'>
    readonly sousCategorieId: FieldRef<"Produit", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Produit findUnique
   */
  export type ProduitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit findUniqueOrThrow
   */
  export type ProduitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit findFirst
   */
  export type ProduitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit findFirstOrThrow
   */
  export type ProduitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit findMany
   */
  export type ProduitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produits to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit create
   */
  export type ProduitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The data needed to create a Produit.
     */
    data: XOR<ProduitCreateInput, ProduitUncheckedCreateInput>
  }

  /**
   * Produit createMany
   */
  export type ProduitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produits.
     */
    data: ProduitCreateManyInput | ProduitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produit createManyAndReturn
   */
  export type ProduitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Produits.
     */
    data: ProduitCreateManyInput | ProduitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Produit update
   */
  export type ProduitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The data needed to update a Produit.
     */
    data: XOR<ProduitUpdateInput, ProduitUncheckedUpdateInput>
    /**
     * Choose, which Produit to update.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit updateMany
   */
  export type ProduitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produits.
     */
    data: XOR<ProduitUpdateManyMutationInput, ProduitUncheckedUpdateManyInput>
    /**
     * Filter which Produits to update
     */
    where?: ProduitWhereInput
  }

  /**
   * Produit upsert
   */
  export type ProduitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The filter to search for the Produit to update in case it exists.
     */
    where: ProduitWhereUniqueInput
    /**
     * In case the Produit found by the `where` argument doesn't exist, create a new Produit with this data.
     */
    create: XOR<ProduitCreateInput, ProduitUncheckedCreateInput>
    /**
     * In case the Produit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProduitUpdateInput, ProduitUncheckedUpdateInput>
  }

  /**
   * Produit delete
   */
  export type ProduitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter which Produit to delete.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit deleteMany
   */
  export type ProduitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produits to delete
     */
    where?: ProduitWhereInput
  }

  /**
   * Produit.commandes
   */
  export type Produit$commandesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
    where?: CommandeProduitWhereInput
    orderBy?: CommandeProduitOrderByWithRelationInput | CommandeProduitOrderByWithRelationInput[]
    cursor?: CommandeProduitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommandeProduitScalarFieldEnum | CommandeProduitScalarFieldEnum[]
  }

  /**
   * Produit without action
   */
  export type ProduitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
  }


  /**
   * Model Fournisseur
   */

  export type AggregateFournisseur = {
    _count: FournisseurCountAggregateOutputType | null
    _avg: FournisseurAvgAggregateOutputType | null
    _sum: FournisseurSumAggregateOutputType | null
    _min: FournisseurMinAggregateOutputType | null
    _max: FournisseurMaxAggregateOutputType | null
  }

  export type FournisseurAvgAggregateOutputType = {
    id: number | null
  }

  export type FournisseurSumAggregateOutputType = {
    id: number | null
  }

  export type FournisseurMinAggregateOutputType = {
    id: number | null
    numero: string | null
    nom: string | null
    adresse: string | null
    deletedAt: Date | null
  }

  export type FournisseurMaxAggregateOutputType = {
    id: number | null
    numero: string | null
    nom: string | null
    adresse: string | null
    deletedAt: Date | null
  }

  export type FournisseurCountAggregateOutputType = {
    id: number
    numero: number
    nom: number
    adresse: number
    deletedAt: number
    _all: number
  }


  export type FournisseurAvgAggregateInputType = {
    id?: true
  }

  export type FournisseurSumAggregateInputType = {
    id?: true
  }

  export type FournisseurMinAggregateInputType = {
    id?: true
    numero?: true
    nom?: true
    adresse?: true
    deletedAt?: true
  }

  export type FournisseurMaxAggregateInputType = {
    id?: true
    numero?: true
    nom?: true
    adresse?: true
    deletedAt?: true
  }

  export type FournisseurCountAggregateInputType = {
    id?: true
    numero?: true
    nom?: true
    adresse?: true
    deletedAt?: true
    _all?: true
  }

  export type FournisseurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fournisseur to aggregate.
     */
    where?: FournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fournisseurs to fetch.
     */
    orderBy?: FournisseurOrderByWithRelationInput | FournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fournisseurs
    **/
    _count?: true | FournisseurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FournisseurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FournisseurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FournisseurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FournisseurMaxAggregateInputType
  }

  export type GetFournisseurAggregateType<T extends FournisseurAggregateArgs> = {
        [P in keyof T & keyof AggregateFournisseur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFournisseur[P]>
      : GetScalarType<T[P], AggregateFournisseur[P]>
  }




  export type FournisseurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FournisseurWhereInput
    orderBy?: FournisseurOrderByWithAggregationInput | FournisseurOrderByWithAggregationInput[]
    by: FournisseurScalarFieldEnum[] | FournisseurScalarFieldEnum
    having?: FournisseurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FournisseurCountAggregateInputType | true
    _avg?: FournisseurAvgAggregateInputType
    _sum?: FournisseurSumAggregateInputType
    _min?: FournisseurMinAggregateInputType
    _max?: FournisseurMaxAggregateInputType
  }

  export type FournisseurGroupByOutputType = {
    id: number
    numero: string
    nom: string
    adresse: string
    deletedAt: Date | null
    _count: FournisseurCountAggregateOutputType | null
    _avg: FournisseurAvgAggregateOutputType | null
    _sum: FournisseurSumAggregateOutputType | null
    _min: FournisseurMinAggregateOutputType | null
    _max: FournisseurMaxAggregateOutputType | null
  }

  type GetFournisseurGroupByPayload<T extends FournisseurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FournisseurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FournisseurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FournisseurGroupByOutputType[P]>
            : GetScalarType<T[P], FournisseurGroupByOutputType[P]>
        }
      >
    >


  export type FournisseurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    nom?: boolean
    adresse?: boolean
    deletedAt?: boolean
    commandes?: boolean | Fournisseur$commandesArgs<ExtArgs>
    _count?: boolean | FournisseurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fournisseur"]>

  export type FournisseurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    nom?: boolean
    adresse?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["fournisseur"]>

  export type FournisseurSelectScalar = {
    id?: boolean
    numero?: boolean
    nom?: boolean
    adresse?: boolean
    deletedAt?: boolean
  }

  export type FournisseurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commandes?: boolean | Fournisseur$commandesArgs<ExtArgs>
    _count?: boolean | FournisseurCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FournisseurIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FournisseurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fournisseur"
    objects: {
      commandes: Prisma.$CommandeFournisseurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      numero: string
      nom: string
      adresse: string
      deletedAt: Date | null
    }, ExtArgs["result"]["fournisseur"]>
    composites: {}
  }

  type FournisseurGetPayload<S extends boolean | null | undefined | FournisseurDefaultArgs> = $Result.GetResult<Prisma.$FournisseurPayload, S>

  type FournisseurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FournisseurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FournisseurCountAggregateInputType | true
    }

  export interface FournisseurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fournisseur'], meta: { name: 'Fournisseur' } }
    /**
     * Find zero or one Fournisseur that matches the filter.
     * @param {FournisseurFindUniqueArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FournisseurFindUniqueArgs>(args: SelectSubset<T, FournisseurFindUniqueArgs<ExtArgs>>): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Fournisseur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FournisseurFindUniqueOrThrowArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FournisseurFindUniqueOrThrowArgs>(args: SelectSubset<T, FournisseurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Fournisseur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurFindFirstArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FournisseurFindFirstArgs>(args?: SelectSubset<T, FournisseurFindFirstArgs<ExtArgs>>): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Fournisseur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurFindFirstOrThrowArgs} args - Arguments to find a Fournisseur
     * @example
     * // Get one Fournisseur
     * const fournisseur = await prisma.fournisseur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FournisseurFindFirstOrThrowArgs>(args?: SelectSubset<T, FournisseurFindFirstOrThrowArgs<ExtArgs>>): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Fournisseurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fournisseurs
     * const fournisseurs = await prisma.fournisseur.findMany()
     * 
     * // Get first 10 Fournisseurs
     * const fournisseurs = await prisma.fournisseur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fournisseurWithIdOnly = await prisma.fournisseur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FournisseurFindManyArgs>(args?: SelectSubset<T, FournisseurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Fournisseur.
     * @param {FournisseurCreateArgs} args - Arguments to create a Fournisseur.
     * @example
     * // Create one Fournisseur
     * const Fournisseur = await prisma.fournisseur.create({
     *   data: {
     *     // ... data to create a Fournisseur
     *   }
     * })
     * 
     */
    create<T extends FournisseurCreateArgs>(args: SelectSubset<T, FournisseurCreateArgs<ExtArgs>>): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Fournisseurs.
     * @param {FournisseurCreateManyArgs} args - Arguments to create many Fournisseurs.
     * @example
     * // Create many Fournisseurs
     * const fournisseur = await prisma.fournisseur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FournisseurCreateManyArgs>(args?: SelectSubset<T, FournisseurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fournisseurs and returns the data saved in the database.
     * @param {FournisseurCreateManyAndReturnArgs} args - Arguments to create many Fournisseurs.
     * @example
     * // Create many Fournisseurs
     * const fournisseur = await prisma.fournisseur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fournisseurs and only return the `id`
     * const fournisseurWithIdOnly = await prisma.fournisseur.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FournisseurCreateManyAndReturnArgs>(args?: SelectSubset<T, FournisseurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Fournisseur.
     * @param {FournisseurDeleteArgs} args - Arguments to delete one Fournisseur.
     * @example
     * // Delete one Fournisseur
     * const Fournisseur = await prisma.fournisseur.delete({
     *   where: {
     *     // ... filter to delete one Fournisseur
     *   }
     * })
     * 
     */
    delete<T extends FournisseurDeleteArgs>(args: SelectSubset<T, FournisseurDeleteArgs<ExtArgs>>): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Fournisseur.
     * @param {FournisseurUpdateArgs} args - Arguments to update one Fournisseur.
     * @example
     * // Update one Fournisseur
     * const fournisseur = await prisma.fournisseur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FournisseurUpdateArgs>(args: SelectSubset<T, FournisseurUpdateArgs<ExtArgs>>): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Fournisseurs.
     * @param {FournisseurDeleteManyArgs} args - Arguments to filter Fournisseurs to delete.
     * @example
     * // Delete a few Fournisseurs
     * const { count } = await prisma.fournisseur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FournisseurDeleteManyArgs>(args?: SelectSubset<T, FournisseurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fournisseurs
     * const fournisseur = await prisma.fournisseur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FournisseurUpdateManyArgs>(args: SelectSubset<T, FournisseurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fournisseur.
     * @param {FournisseurUpsertArgs} args - Arguments to update or create a Fournisseur.
     * @example
     * // Update or create a Fournisseur
     * const fournisseur = await prisma.fournisseur.upsert({
     *   create: {
     *     // ... data to create a Fournisseur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fournisseur we want to update
     *   }
     * })
     */
    upsert<T extends FournisseurUpsertArgs>(args: SelectSubset<T, FournisseurUpsertArgs<ExtArgs>>): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Fournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurCountArgs} args - Arguments to filter Fournisseurs to count.
     * @example
     * // Count the number of Fournisseurs
     * const count = await prisma.fournisseur.count({
     *   where: {
     *     // ... the filter for the Fournisseurs we want to count
     *   }
     * })
    **/
    count<T extends FournisseurCountArgs>(
      args?: Subset<T, FournisseurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FournisseurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FournisseurAggregateArgs>(args: Subset<T, FournisseurAggregateArgs>): Prisma.PrismaPromise<GetFournisseurAggregateType<T>>

    /**
     * Group by Fournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FournisseurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FournisseurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FournisseurGroupByArgs['orderBy'] }
        : { orderBy?: FournisseurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FournisseurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFournisseurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fournisseur model
   */
  readonly fields: FournisseurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fournisseur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FournisseurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    commandes<T extends Fournisseur$commandesArgs<ExtArgs> = {}>(args?: Subset<T, Fournisseur$commandesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Fournisseur model
   */ 
  interface FournisseurFieldRefs {
    readonly id: FieldRef<"Fournisseur", 'Int'>
    readonly numero: FieldRef<"Fournisseur", 'String'>
    readonly nom: FieldRef<"Fournisseur", 'String'>
    readonly adresse: FieldRef<"Fournisseur", 'String'>
    readonly deletedAt: FieldRef<"Fournisseur", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Fournisseur findUnique
   */
  export type FournisseurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter, which Fournisseur to fetch.
     */
    where: FournisseurWhereUniqueInput
  }

  /**
   * Fournisseur findUniqueOrThrow
   */
  export type FournisseurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter, which Fournisseur to fetch.
     */
    where: FournisseurWhereUniqueInput
  }

  /**
   * Fournisseur findFirst
   */
  export type FournisseurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter, which Fournisseur to fetch.
     */
    where?: FournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fournisseurs to fetch.
     */
    orderBy?: FournisseurOrderByWithRelationInput | FournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fournisseurs.
     */
    cursor?: FournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fournisseurs.
     */
    distinct?: FournisseurScalarFieldEnum | FournisseurScalarFieldEnum[]
  }

  /**
   * Fournisseur findFirstOrThrow
   */
  export type FournisseurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter, which Fournisseur to fetch.
     */
    where?: FournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fournisseurs to fetch.
     */
    orderBy?: FournisseurOrderByWithRelationInput | FournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fournisseurs.
     */
    cursor?: FournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fournisseurs.
     */
    distinct?: FournisseurScalarFieldEnum | FournisseurScalarFieldEnum[]
  }

  /**
   * Fournisseur findMany
   */
  export type FournisseurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter, which Fournisseurs to fetch.
     */
    where?: FournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fournisseurs to fetch.
     */
    orderBy?: FournisseurOrderByWithRelationInput | FournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fournisseurs.
     */
    cursor?: FournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fournisseurs.
     */
    skip?: number
    distinct?: FournisseurScalarFieldEnum | FournisseurScalarFieldEnum[]
  }

  /**
   * Fournisseur create
   */
  export type FournisseurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * The data needed to create a Fournisseur.
     */
    data: XOR<FournisseurCreateInput, FournisseurUncheckedCreateInput>
  }

  /**
   * Fournisseur createMany
   */
  export type FournisseurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fournisseurs.
     */
    data: FournisseurCreateManyInput | FournisseurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fournisseur createManyAndReturn
   */
  export type FournisseurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Fournisseurs.
     */
    data: FournisseurCreateManyInput | FournisseurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fournisseur update
   */
  export type FournisseurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * The data needed to update a Fournisseur.
     */
    data: XOR<FournisseurUpdateInput, FournisseurUncheckedUpdateInput>
    /**
     * Choose, which Fournisseur to update.
     */
    where: FournisseurWhereUniqueInput
  }

  /**
   * Fournisseur updateMany
   */
  export type FournisseurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fournisseurs.
     */
    data: XOR<FournisseurUpdateManyMutationInput, FournisseurUncheckedUpdateManyInput>
    /**
     * Filter which Fournisseurs to update
     */
    where?: FournisseurWhereInput
  }

  /**
   * Fournisseur upsert
   */
  export type FournisseurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * The filter to search for the Fournisseur to update in case it exists.
     */
    where: FournisseurWhereUniqueInput
    /**
     * In case the Fournisseur found by the `where` argument doesn't exist, create a new Fournisseur with this data.
     */
    create: XOR<FournisseurCreateInput, FournisseurUncheckedCreateInput>
    /**
     * In case the Fournisseur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FournisseurUpdateInput, FournisseurUncheckedUpdateInput>
  }

  /**
   * Fournisseur delete
   */
  export type FournisseurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
    /**
     * Filter which Fournisseur to delete.
     */
    where: FournisseurWhereUniqueInput
  }

  /**
   * Fournisseur deleteMany
   */
  export type FournisseurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fournisseurs to delete
     */
    where?: FournisseurWhereInput
  }

  /**
   * Fournisseur.commandes
   */
  export type Fournisseur$commandesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    where?: CommandeFournisseurWhereInput
    orderBy?: CommandeFournisseurOrderByWithRelationInput | CommandeFournisseurOrderByWithRelationInput[]
    cursor?: CommandeFournisseurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommandeFournisseurScalarFieldEnum | CommandeFournisseurScalarFieldEnum[]
  }

  /**
   * Fournisseur without action
   */
  export type FournisseurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fournisseur
     */
    select?: FournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FournisseurInclude<ExtArgs> | null
  }


  /**
   * Model CommandeFournisseur
   */

  export type AggregateCommandeFournisseur = {
    _count: CommandeFournisseurCountAggregateOutputType | null
    _avg: CommandeFournisseurAvgAggregateOutputType | null
    _sum: CommandeFournisseurSumAggregateOutputType | null
    _min: CommandeFournisseurMinAggregateOutputType | null
    _max: CommandeFournisseurMaxAggregateOutputType | null
  }

  export type CommandeFournisseurAvgAggregateOutputType = {
    id: number | null
    montantTotal: number | null
    fournisseurId: number | null
  }

  export type CommandeFournisseurSumAggregateOutputType = {
    id: number | null
    montantTotal: number | null
    fournisseurId: number | null
  }

  export type CommandeFournisseurMinAggregateOutputType = {
    id: number | null
    dateCommande: Date | null
    montantTotal: number | null
    dateLivraisonPrevue: Date | null
    dateLivraisonReelle: Date | null
    statut: $Enums.StatutCommande | null
    fournisseurId: number | null
  }

  export type CommandeFournisseurMaxAggregateOutputType = {
    id: number | null
    dateCommande: Date | null
    montantTotal: number | null
    dateLivraisonPrevue: Date | null
    dateLivraisonReelle: Date | null
    statut: $Enums.StatutCommande | null
    fournisseurId: number | null
  }

  export type CommandeFournisseurCountAggregateOutputType = {
    id: number
    dateCommande: number
    montantTotal: number
    dateLivraisonPrevue: number
    dateLivraisonReelle: number
    statut: number
    fournisseurId: number
    _all: number
  }


  export type CommandeFournisseurAvgAggregateInputType = {
    id?: true
    montantTotal?: true
    fournisseurId?: true
  }

  export type CommandeFournisseurSumAggregateInputType = {
    id?: true
    montantTotal?: true
    fournisseurId?: true
  }

  export type CommandeFournisseurMinAggregateInputType = {
    id?: true
    dateCommande?: true
    montantTotal?: true
    dateLivraisonPrevue?: true
    dateLivraisonReelle?: true
    statut?: true
    fournisseurId?: true
  }

  export type CommandeFournisseurMaxAggregateInputType = {
    id?: true
    dateCommande?: true
    montantTotal?: true
    dateLivraisonPrevue?: true
    dateLivraisonReelle?: true
    statut?: true
    fournisseurId?: true
  }

  export type CommandeFournisseurCountAggregateInputType = {
    id?: true
    dateCommande?: true
    montantTotal?: true
    dateLivraisonPrevue?: true
    dateLivraisonReelle?: true
    statut?: true
    fournisseurId?: true
    _all?: true
  }

  export type CommandeFournisseurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommandeFournisseur to aggregate.
     */
    where?: CommandeFournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeFournisseurs to fetch.
     */
    orderBy?: CommandeFournisseurOrderByWithRelationInput | CommandeFournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommandeFournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeFournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeFournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommandeFournisseurs
    **/
    _count?: true | CommandeFournisseurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommandeFournisseurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommandeFournisseurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommandeFournisseurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommandeFournisseurMaxAggregateInputType
  }

  export type GetCommandeFournisseurAggregateType<T extends CommandeFournisseurAggregateArgs> = {
        [P in keyof T & keyof AggregateCommandeFournisseur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommandeFournisseur[P]>
      : GetScalarType<T[P], AggregateCommandeFournisseur[P]>
  }




  export type CommandeFournisseurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandeFournisseurWhereInput
    orderBy?: CommandeFournisseurOrderByWithAggregationInput | CommandeFournisseurOrderByWithAggregationInput[]
    by: CommandeFournisseurScalarFieldEnum[] | CommandeFournisseurScalarFieldEnum
    having?: CommandeFournisseurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommandeFournisseurCountAggregateInputType | true
    _avg?: CommandeFournisseurAvgAggregateInputType
    _sum?: CommandeFournisseurSumAggregateInputType
    _min?: CommandeFournisseurMinAggregateInputType
    _max?: CommandeFournisseurMaxAggregateInputType
  }

  export type CommandeFournisseurGroupByOutputType = {
    id: number
    dateCommande: Date
    montantTotal: number
    dateLivraisonPrevue: Date | null
    dateLivraisonReelle: Date | null
    statut: $Enums.StatutCommande
    fournisseurId: number
    _count: CommandeFournisseurCountAggregateOutputType | null
    _avg: CommandeFournisseurAvgAggregateOutputType | null
    _sum: CommandeFournisseurSumAggregateOutputType | null
    _min: CommandeFournisseurMinAggregateOutputType | null
    _max: CommandeFournisseurMaxAggregateOutputType | null
  }

  type GetCommandeFournisseurGroupByPayload<T extends CommandeFournisseurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommandeFournisseurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommandeFournisseurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommandeFournisseurGroupByOutputType[P]>
            : GetScalarType<T[P], CommandeFournisseurGroupByOutputType[P]>
        }
      >
    >


  export type CommandeFournisseurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCommande?: boolean
    montantTotal?: boolean
    dateLivraisonPrevue?: boolean
    dateLivraisonReelle?: boolean
    statut?: boolean
    fournisseurId?: boolean
    fournisseur?: boolean | FournisseurDefaultArgs<ExtArgs>
    produits?: boolean | CommandeFournisseur$produitsArgs<ExtArgs>
    paiements?: boolean | CommandeFournisseur$paiementsArgs<ExtArgs>
    _count?: boolean | CommandeFournisseurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commandeFournisseur"]>

  export type CommandeFournisseurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateCommande?: boolean
    montantTotal?: boolean
    dateLivraisonPrevue?: boolean
    dateLivraisonReelle?: boolean
    statut?: boolean
    fournisseurId?: boolean
    fournisseur?: boolean | FournisseurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commandeFournisseur"]>

  export type CommandeFournisseurSelectScalar = {
    id?: boolean
    dateCommande?: boolean
    montantTotal?: boolean
    dateLivraisonPrevue?: boolean
    dateLivraisonReelle?: boolean
    statut?: boolean
    fournisseurId?: boolean
  }

  export type CommandeFournisseurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fournisseur?: boolean | FournisseurDefaultArgs<ExtArgs>
    produits?: boolean | CommandeFournisseur$produitsArgs<ExtArgs>
    paiements?: boolean | CommandeFournisseur$paiementsArgs<ExtArgs>
    _count?: boolean | CommandeFournisseurCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommandeFournisseurIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fournisseur?: boolean | FournisseurDefaultArgs<ExtArgs>
  }

  export type $CommandeFournisseurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommandeFournisseur"
    objects: {
      fournisseur: Prisma.$FournisseurPayload<ExtArgs>
      produits: Prisma.$CommandeProduitPayload<ExtArgs>[]
      paiements: Prisma.$PaiementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dateCommande: Date
      montantTotal: number
      dateLivraisonPrevue: Date | null
      dateLivraisonReelle: Date | null
      statut: $Enums.StatutCommande
      fournisseurId: number
    }, ExtArgs["result"]["commandeFournisseur"]>
    composites: {}
  }

  type CommandeFournisseurGetPayload<S extends boolean | null | undefined | CommandeFournisseurDefaultArgs> = $Result.GetResult<Prisma.$CommandeFournisseurPayload, S>

  type CommandeFournisseurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommandeFournisseurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommandeFournisseurCountAggregateInputType | true
    }

  export interface CommandeFournisseurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommandeFournisseur'], meta: { name: 'CommandeFournisseur' } }
    /**
     * Find zero or one CommandeFournisseur that matches the filter.
     * @param {CommandeFournisseurFindUniqueArgs} args - Arguments to find a CommandeFournisseur
     * @example
     * // Get one CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommandeFournisseurFindUniqueArgs>(args: SelectSubset<T, CommandeFournisseurFindUniqueArgs<ExtArgs>>): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CommandeFournisseur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommandeFournisseurFindUniqueOrThrowArgs} args - Arguments to find a CommandeFournisseur
     * @example
     * // Get one CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommandeFournisseurFindUniqueOrThrowArgs>(args: SelectSubset<T, CommandeFournisseurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CommandeFournisseur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurFindFirstArgs} args - Arguments to find a CommandeFournisseur
     * @example
     * // Get one CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommandeFournisseurFindFirstArgs>(args?: SelectSubset<T, CommandeFournisseurFindFirstArgs<ExtArgs>>): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CommandeFournisseur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurFindFirstOrThrowArgs} args - Arguments to find a CommandeFournisseur
     * @example
     * // Get one CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommandeFournisseurFindFirstOrThrowArgs>(args?: SelectSubset<T, CommandeFournisseurFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CommandeFournisseurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommandeFournisseurs
     * const commandeFournisseurs = await prisma.commandeFournisseur.findMany()
     * 
     * // Get first 10 CommandeFournisseurs
     * const commandeFournisseurs = await prisma.commandeFournisseur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commandeFournisseurWithIdOnly = await prisma.commandeFournisseur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommandeFournisseurFindManyArgs>(args?: SelectSubset<T, CommandeFournisseurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CommandeFournisseur.
     * @param {CommandeFournisseurCreateArgs} args - Arguments to create a CommandeFournisseur.
     * @example
     * // Create one CommandeFournisseur
     * const CommandeFournisseur = await prisma.commandeFournisseur.create({
     *   data: {
     *     // ... data to create a CommandeFournisseur
     *   }
     * })
     * 
     */
    create<T extends CommandeFournisseurCreateArgs>(args: SelectSubset<T, CommandeFournisseurCreateArgs<ExtArgs>>): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CommandeFournisseurs.
     * @param {CommandeFournisseurCreateManyArgs} args - Arguments to create many CommandeFournisseurs.
     * @example
     * // Create many CommandeFournisseurs
     * const commandeFournisseur = await prisma.commandeFournisseur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommandeFournisseurCreateManyArgs>(args?: SelectSubset<T, CommandeFournisseurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CommandeFournisseurs and returns the data saved in the database.
     * @param {CommandeFournisseurCreateManyAndReturnArgs} args - Arguments to create many CommandeFournisseurs.
     * @example
     * // Create many CommandeFournisseurs
     * const commandeFournisseur = await prisma.commandeFournisseur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CommandeFournisseurs and only return the `id`
     * const commandeFournisseurWithIdOnly = await prisma.commandeFournisseur.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommandeFournisseurCreateManyAndReturnArgs>(args?: SelectSubset<T, CommandeFournisseurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CommandeFournisseur.
     * @param {CommandeFournisseurDeleteArgs} args - Arguments to delete one CommandeFournisseur.
     * @example
     * // Delete one CommandeFournisseur
     * const CommandeFournisseur = await prisma.commandeFournisseur.delete({
     *   where: {
     *     // ... filter to delete one CommandeFournisseur
     *   }
     * })
     * 
     */
    delete<T extends CommandeFournisseurDeleteArgs>(args: SelectSubset<T, CommandeFournisseurDeleteArgs<ExtArgs>>): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CommandeFournisseur.
     * @param {CommandeFournisseurUpdateArgs} args - Arguments to update one CommandeFournisseur.
     * @example
     * // Update one CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommandeFournisseurUpdateArgs>(args: SelectSubset<T, CommandeFournisseurUpdateArgs<ExtArgs>>): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CommandeFournisseurs.
     * @param {CommandeFournisseurDeleteManyArgs} args - Arguments to filter CommandeFournisseurs to delete.
     * @example
     * // Delete a few CommandeFournisseurs
     * const { count } = await prisma.commandeFournisseur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommandeFournisseurDeleteManyArgs>(args?: SelectSubset<T, CommandeFournisseurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommandeFournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommandeFournisseurs
     * const commandeFournisseur = await prisma.commandeFournisseur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommandeFournisseurUpdateManyArgs>(args: SelectSubset<T, CommandeFournisseurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommandeFournisseur.
     * @param {CommandeFournisseurUpsertArgs} args - Arguments to update or create a CommandeFournisseur.
     * @example
     * // Update or create a CommandeFournisseur
     * const commandeFournisseur = await prisma.commandeFournisseur.upsert({
     *   create: {
     *     // ... data to create a CommandeFournisseur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommandeFournisseur we want to update
     *   }
     * })
     */
    upsert<T extends CommandeFournisseurUpsertArgs>(args: SelectSubset<T, CommandeFournisseurUpsertArgs<ExtArgs>>): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CommandeFournisseurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurCountArgs} args - Arguments to filter CommandeFournisseurs to count.
     * @example
     * // Count the number of CommandeFournisseurs
     * const count = await prisma.commandeFournisseur.count({
     *   where: {
     *     // ... the filter for the CommandeFournisseurs we want to count
     *   }
     * })
    **/
    count<T extends CommandeFournisseurCountArgs>(
      args?: Subset<T, CommandeFournisseurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommandeFournisseurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommandeFournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommandeFournisseurAggregateArgs>(args: Subset<T, CommandeFournisseurAggregateArgs>): Prisma.PrismaPromise<GetCommandeFournisseurAggregateType<T>>

    /**
     * Group by CommandeFournisseur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeFournisseurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommandeFournisseurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommandeFournisseurGroupByArgs['orderBy'] }
        : { orderBy?: CommandeFournisseurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommandeFournisseurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommandeFournisseurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommandeFournisseur model
   */
  readonly fields: CommandeFournisseurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommandeFournisseur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommandeFournisseurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fournisseur<T extends FournisseurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FournisseurDefaultArgs<ExtArgs>>): Prisma__FournisseurClient<$Result.GetResult<Prisma.$FournisseurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    produits<T extends CommandeFournisseur$produitsArgs<ExtArgs> = {}>(args?: Subset<T, CommandeFournisseur$produitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "findMany"> | Null>
    paiements<T extends CommandeFournisseur$paiementsArgs<ExtArgs> = {}>(args?: Subset<T, CommandeFournisseur$paiementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommandeFournisseur model
   */ 
  interface CommandeFournisseurFieldRefs {
    readonly id: FieldRef<"CommandeFournisseur", 'Int'>
    readonly dateCommande: FieldRef<"CommandeFournisseur", 'DateTime'>
    readonly montantTotal: FieldRef<"CommandeFournisseur", 'Float'>
    readonly dateLivraisonPrevue: FieldRef<"CommandeFournisseur", 'DateTime'>
    readonly dateLivraisonReelle: FieldRef<"CommandeFournisseur", 'DateTime'>
    readonly statut: FieldRef<"CommandeFournisseur", 'StatutCommande'>
    readonly fournisseurId: FieldRef<"CommandeFournisseur", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CommandeFournisseur findUnique
   */
  export type CommandeFournisseurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter, which CommandeFournisseur to fetch.
     */
    where: CommandeFournisseurWhereUniqueInput
  }

  /**
   * CommandeFournisseur findUniqueOrThrow
   */
  export type CommandeFournisseurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter, which CommandeFournisseur to fetch.
     */
    where: CommandeFournisseurWhereUniqueInput
  }

  /**
   * CommandeFournisseur findFirst
   */
  export type CommandeFournisseurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter, which CommandeFournisseur to fetch.
     */
    where?: CommandeFournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeFournisseurs to fetch.
     */
    orderBy?: CommandeFournisseurOrderByWithRelationInput | CommandeFournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommandeFournisseurs.
     */
    cursor?: CommandeFournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeFournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeFournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommandeFournisseurs.
     */
    distinct?: CommandeFournisseurScalarFieldEnum | CommandeFournisseurScalarFieldEnum[]
  }

  /**
   * CommandeFournisseur findFirstOrThrow
   */
  export type CommandeFournisseurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter, which CommandeFournisseur to fetch.
     */
    where?: CommandeFournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeFournisseurs to fetch.
     */
    orderBy?: CommandeFournisseurOrderByWithRelationInput | CommandeFournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommandeFournisseurs.
     */
    cursor?: CommandeFournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeFournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeFournisseurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommandeFournisseurs.
     */
    distinct?: CommandeFournisseurScalarFieldEnum | CommandeFournisseurScalarFieldEnum[]
  }

  /**
   * CommandeFournisseur findMany
   */
  export type CommandeFournisseurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter, which CommandeFournisseurs to fetch.
     */
    where?: CommandeFournisseurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeFournisseurs to fetch.
     */
    orderBy?: CommandeFournisseurOrderByWithRelationInput | CommandeFournisseurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommandeFournisseurs.
     */
    cursor?: CommandeFournisseurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeFournisseurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeFournisseurs.
     */
    skip?: number
    distinct?: CommandeFournisseurScalarFieldEnum | CommandeFournisseurScalarFieldEnum[]
  }

  /**
   * CommandeFournisseur create
   */
  export type CommandeFournisseurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * The data needed to create a CommandeFournisseur.
     */
    data: XOR<CommandeFournisseurCreateInput, CommandeFournisseurUncheckedCreateInput>
  }

  /**
   * CommandeFournisseur createMany
   */
  export type CommandeFournisseurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommandeFournisseurs.
     */
    data: CommandeFournisseurCreateManyInput | CommandeFournisseurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommandeFournisseur createManyAndReturn
   */
  export type CommandeFournisseurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CommandeFournisseurs.
     */
    data: CommandeFournisseurCreateManyInput | CommandeFournisseurCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CommandeFournisseur update
   */
  export type CommandeFournisseurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * The data needed to update a CommandeFournisseur.
     */
    data: XOR<CommandeFournisseurUpdateInput, CommandeFournisseurUncheckedUpdateInput>
    /**
     * Choose, which CommandeFournisseur to update.
     */
    where: CommandeFournisseurWhereUniqueInput
  }

  /**
   * CommandeFournisseur updateMany
   */
  export type CommandeFournisseurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommandeFournisseurs.
     */
    data: XOR<CommandeFournisseurUpdateManyMutationInput, CommandeFournisseurUncheckedUpdateManyInput>
    /**
     * Filter which CommandeFournisseurs to update
     */
    where?: CommandeFournisseurWhereInput
  }

  /**
   * CommandeFournisseur upsert
   */
  export type CommandeFournisseurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * The filter to search for the CommandeFournisseur to update in case it exists.
     */
    where: CommandeFournisseurWhereUniqueInput
    /**
     * In case the CommandeFournisseur found by the `where` argument doesn't exist, create a new CommandeFournisseur with this data.
     */
    create: XOR<CommandeFournisseurCreateInput, CommandeFournisseurUncheckedCreateInput>
    /**
     * In case the CommandeFournisseur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommandeFournisseurUpdateInput, CommandeFournisseurUncheckedUpdateInput>
  }

  /**
   * CommandeFournisseur delete
   */
  export type CommandeFournisseurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
    /**
     * Filter which CommandeFournisseur to delete.
     */
    where: CommandeFournisseurWhereUniqueInput
  }

  /**
   * CommandeFournisseur deleteMany
   */
  export type CommandeFournisseurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommandeFournisseurs to delete
     */
    where?: CommandeFournisseurWhereInput
  }

  /**
   * CommandeFournisseur.produits
   */
  export type CommandeFournisseur$produitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
    where?: CommandeProduitWhereInput
    orderBy?: CommandeProduitOrderByWithRelationInput | CommandeProduitOrderByWithRelationInput[]
    cursor?: CommandeProduitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommandeProduitScalarFieldEnum | CommandeProduitScalarFieldEnum[]
  }

  /**
   * CommandeFournisseur.paiements
   */
  export type CommandeFournisseur$paiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    where?: PaiementWhereInput
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    cursor?: PaiementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * CommandeFournisseur without action
   */
  export type CommandeFournisseurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeFournisseur
     */
    select?: CommandeFournisseurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeFournisseurInclude<ExtArgs> | null
  }


  /**
   * Model CommandeProduit
   */

  export type AggregateCommandeProduit = {
    _count: CommandeProduitCountAggregateOutputType | null
    _avg: CommandeProduitAvgAggregateOutputType | null
    _sum: CommandeProduitSumAggregateOutputType | null
    _min: CommandeProduitMinAggregateOutputType | null
    _max: CommandeProduitMaxAggregateOutputType | null
  }

  export type CommandeProduitAvgAggregateOutputType = {
    id: number | null
    commandeId: number | null
    produitId: number | null
    quantite: number | null
    prixAchat: number | null
  }

  export type CommandeProduitSumAggregateOutputType = {
    id: number | null
    commandeId: number | null
    produitId: number | null
    quantite: number | null
    prixAchat: number | null
  }

  export type CommandeProduitMinAggregateOutputType = {
    id: number | null
    commandeId: number | null
    produitId: number | null
    quantite: number | null
    prixAchat: number | null
  }

  export type CommandeProduitMaxAggregateOutputType = {
    id: number | null
    commandeId: number | null
    produitId: number | null
    quantite: number | null
    prixAchat: number | null
  }

  export type CommandeProduitCountAggregateOutputType = {
    id: number
    commandeId: number
    produitId: number
    quantite: number
    prixAchat: number
    _all: number
  }


  export type CommandeProduitAvgAggregateInputType = {
    id?: true
    commandeId?: true
    produitId?: true
    quantite?: true
    prixAchat?: true
  }

  export type CommandeProduitSumAggregateInputType = {
    id?: true
    commandeId?: true
    produitId?: true
    quantite?: true
    prixAchat?: true
  }

  export type CommandeProduitMinAggregateInputType = {
    id?: true
    commandeId?: true
    produitId?: true
    quantite?: true
    prixAchat?: true
  }

  export type CommandeProduitMaxAggregateInputType = {
    id?: true
    commandeId?: true
    produitId?: true
    quantite?: true
    prixAchat?: true
  }

  export type CommandeProduitCountAggregateInputType = {
    id?: true
    commandeId?: true
    produitId?: true
    quantite?: true
    prixAchat?: true
    _all?: true
  }

  export type CommandeProduitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommandeProduit to aggregate.
     */
    where?: CommandeProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeProduits to fetch.
     */
    orderBy?: CommandeProduitOrderByWithRelationInput | CommandeProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommandeProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeProduits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommandeProduits
    **/
    _count?: true | CommandeProduitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommandeProduitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommandeProduitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommandeProduitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommandeProduitMaxAggregateInputType
  }

  export type GetCommandeProduitAggregateType<T extends CommandeProduitAggregateArgs> = {
        [P in keyof T & keyof AggregateCommandeProduit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommandeProduit[P]>
      : GetScalarType<T[P], AggregateCommandeProduit[P]>
  }




  export type CommandeProduitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandeProduitWhereInput
    orderBy?: CommandeProduitOrderByWithAggregationInput | CommandeProduitOrderByWithAggregationInput[]
    by: CommandeProduitScalarFieldEnum[] | CommandeProduitScalarFieldEnum
    having?: CommandeProduitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommandeProduitCountAggregateInputType | true
    _avg?: CommandeProduitAvgAggregateInputType
    _sum?: CommandeProduitSumAggregateInputType
    _min?: CommandeProduitMinAggregateInputType
    _max?: CommandeProduitMaxAggregateInputType
  }

  export type CommandeProduitGroupByOutputType = {
    id: number
    commandeId: number
    produitId: number
    quantite: number
    prixAchat: number
    _count: CommandeProduitCountAggregateOutputType | null
    _avg: CommandeProduitAvgAggregateOutputType | null
    _sum: CommandeProduitSumAggregateOutputType | null
    _min: CommandeProduitMinAggregateOutputType | null
    _max: CommandeProduitMaxAggregateOutputType | null
  }

  type GetCommandeProduitGroupByPayload<T extends CommandeProduitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommandeProduitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommandeProduitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommandeProduitGroupByOutputType[P]>
            : GetScalarType<T[P], CommandeProduitGroupByOutputType[P]>
        }
      >
    >


  export type CommandeProduitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    commandeId?: boolean
    produitId?: boolean
    quantite?: boolean
    prixAchat?: boolean
    commande?: boolean | CommandeFournisseurDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commandeProduit"]>

  export type CommandeProduitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    commandeId?: boolean
    produitId?: boolean
    quantite?: boolean
    prixAchat?: boolean
    commande?: boolean | CommandeFournisseurDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commandeProduit"]>

  export type CommandeProduitSelectScalar = {
    id?: boolean
    commandeId?: boolean
    produitId?: boolean
    quantite?: boolean
    prixAchat?: boolean
  }

  export type CommandeProduitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | CommandeFournisseurDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }
  export type CommandeProduitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | CommandeFournisseurDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }

  export type $CommandeProduitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommandeProduit"
    objects: {
      commande: Prisma.$CommandeFournisseurPayload<ExtArgs>
      produit: Prisma.$ProduitPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      commandeId: number
      produitId: number
      quantite: number
      prixAchat: number
    }, ExtArgs["result"]["commandeProduit"]>
    composites: {}
  }

  type CommandeProduitGetPayload<S extends boolean | null | undefined | CommandeProduitDefaultArgs> = $Result.GetResult<Prisma.$CommandeProduitPayload, S>

  type CommandeProduitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommandeProduitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommandeProduitCountAggregateInputType | true
    }

  export interface CommandeProduitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommandeProduit'], meta: { name: 'CommandeProduit' } }
    /**
     * Find zero or one CommandeProduit that matches the filter.
     * @param {CommandeProduitFindUniqueArgs} args - Arguments to find a CommandeProduit
     * @example
     * // Get one CommandeProduit
     * const commandeProduit = await prisma.commandeProduit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommandeProduitFindUniqueArgs>(args: SelectSubset<T, CommandeProduitFindUniqueArgs<ExtArgs>>): Prisma__CommandeProduitClient<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CommandeProduit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommandeProduitFindUniqueOrThrowArgs} args - Arguments to find a CommandeProduit
     * @example
     * // Get one CommandeProduit
     * const commandeProduit = await prisma.commandeProduit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommandeProduitFindUniqueOrThrowArgs>(args: SelectSubset<T, CommandeProduitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommandeProduitClient<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CommandeProduit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeProduitFindFirstArgs} args - Arguments to find a CommandeProduit
     * @example
     * // Get one CommandeProduit
     * const commandeProduit = await prisma.commandeProduit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommandeProduitFindFirstArgs>(args?: SelectSubset<T, CommandeProduitFindFirstArgs<ExtArgs>>): Prisma__CommandeProduitClient<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CommandeProduit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeProduitFindFirstOrThrowArgs} args - Arguments to find a CommandeProduit
     * @example
     * // Get one CommandeProduit
     * const commandeProduit = await prisma.commandeProduit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommandeProduitFindFirstOrThrowArgs>(args?: SelectSubset<T, CommandeProduitFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommandeProduitClient<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CommandeProduits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeProduitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommandeProduits
     * const commandeProduits = await prisma.commandeProduit.findMany()
     * 
     * // Get first 10 CommandeProduits
     * const commandeProduits = await prisma.commandeProduit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commandeProduitWithIdOnly = await prisma.commandeProduit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommandeProduitFindManyArgs>(args?: SelectSubset<T, CommandeProduitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CommandeProduit.
     * @param {CommandeProduitCreateArgs} args - Arguments to create a CommandeProduit.
     * @example
     * // Create one CommandeProduit
     * const CommandeProduit = await prisma.commandeProduit.create({
     *   data: {
     *     // ... data to create a CommandeProduit
     *   }
     * })
     * 
     */
    create<T extends CommandeProduitCreateArgs>(args: SelectSubset<T, CommandeProduitCreateArgs<ExtArgs>>): Prisma__CommandeProduitClient<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CommandeProduits.
     * @param {CommandeProduitCreateManyArgs} args - Arguments to create many CommandeProduits.
     * @example
     * // Create many CommandeProduits
     * const commandeProduit = await prisma.commandeProduit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommandeProduitCreateManyArgs>(args?: SelectSubset<T, CommandeProduitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CommandeProduits and returns the data saved in the database.
     * @param {CommandeProduitCreateManyAndReturnArgs} args - Arguments to create many CommandeProduits.
     * @example
     * // Create many CommandeProduits
     * const commandeProduit = await prisma.commandeProduit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CommandeProduits and only return the `id`
     * const commandeProduitWithIdOnly = await prisma.commandeProduit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommandeProduitCreateManyAndReturnArgs>(args?: SelectSubset<T, CommandeProduitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CommandeProduit.
     * @param {CommandeProduitDeleteArgs} args - Arguments to delete one CommandeProduit.
     * @example
     * // Delete one CommandeProduit
     * const CommandeProduit = await prisma.commandeProduit.delete({
     *   where: {
     *     // ... filter to delete one CommandeProduit
     *   }
     * })
     * 
     */
    delete<T extends CommandeProduitDeleteArgs>(args: SelectSubset<T, CommandeProduitDeleteArgs<ExtArgs>>): Prisma__CommandeProduitClient<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CommandeProduit.
     * @param {CommandeProduitUpdateArgs} args - Arguments to update one CommandeProduit.
     * @example
     * // Update one CommandeProduit
     * const commandeProduit = await prisma.commandeProduit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommandeProduitUpdateArgs>(args: SelectSubset<T, CommandeProduitUpdateArgs<ExtArgs>>): Prisma__CommandeProduitClient<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CommandeProduits.
     * @param {CommandeProduitDeleteManyArgs} args - Arguments to filter CommandeProduits to delete.
     * @example
     * // Delete a few CommandeProduits
     * const { count } = await prisma.commandeProduit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommandeProduitDeleteManyArgs>(args?: SelectSubset<T, CommandeProduitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommandeProduits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeProduitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommandeProduits
     * const commandeProduit = await prisma.commandeProduit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommandeProduitUpdateManyArgs>(args: SelectSubset<T, CommandeProduitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommandeProduit.
     * @param {CommandeProduitUpsertArgs} args - Arguments to update or create a CommandeProduit.
     * @example
     * // Update or create a CommandeProduit
     * const commandeProduit = await prisma.commandeProduit.upsert({
     *   create: {
     *     // ... data to create a CommandeProduit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommandeProduit we want to update
     *   }
     * })
     */
    upsert<T extends CommandeProduitUpsertArgs>(args: SelectSubset<T, CommandeProduitUpsertArgs<ExtArgs>>): Prisma__CommandeProduitClient<$Result.GetResult<Prisma.$CommandeProduitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CommandeProduits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeProduitCountArgs} args - Arguments to filter CommandeProduits to count.
     * @example
     * // Count the number of CommandeProduits
     * const count = await prisma.commandeProduit.count({
     *   where: {
     *     // ... the filter for the CommandeProduits we want to count
     *   }
     * })
    **/
    count<T extends CommandeProduitCountArgs>(
      args?: Subset<T, CommandeProduitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommandeProduitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommandeProduit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeProduitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommandeProduitAggregateArgs>(args: Subset<T, CommandeProduitAggregateArgs>): Prisma.PrismaPromise<GetCommandeProduitAggregateType<T>>

    /**
     * Group by CommandeProduit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandeProduitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommandeProduitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommandeProduitGroupByArgs['orderBy'] }
        : { orderBy?: CommandeProduitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommandeProduitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommandeProduitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommandeProduit model
   */
  readonly fields: CommandeProduitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommandeProduit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommandeProduitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    commande<T extends CommandeFournisseurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommandeFournisseurDefaultArgs<ExtArgs>>): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    produit<T extends ProduitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProduitDefaultArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommandeProduit model
   */ 
  interface CommandeProduitFieldRefs {
    readonly id: FieldRef<"CommandeProduit", 'Int'>
    readonly commandeId: FieldRef<"CommandeProduit", 'Int'>
    readonly produitId: FieldRef<"CommandeProduit", 'Int'>
    readonly quantite: FieldRef<"CommandeProduit", 'Int'>
    readonly prixAchat: FieldRef<"CommandeProduit", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * CommandeProduit findUnique
   */
  export type CommandeProduitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
    /**
     * Filter, which CommandeProduit to fetch.
     */
    where: CommandeProduitWhereUniqueInput
  }

  /**
   * CommandeProduit findUniqueOrThrow
   */
  export type CommandeProduitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
    /**
     * Filter, which CommandeProduit to fetch.
     */
    where: CommandeProduitWhereUniqueInput
  }

  /**
   * CommandeProduit findFirst
   */
  export type CommandeProduitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
    /**
     * Filter, which CommandeProduit to fetch.
     */
    where?: CommandeProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeProduits to fetch.
     */
    orderBy?: CommandeProduitOrderByWithRelationInput | CommandeProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommandeProduits.
     */
    cursor?: CommandeProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeProduits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommandeProduits.
     */
    distinct?: CommandeProduitScalarFieldEnum | CommandeProduitScalarFieldEnum[]
  }

  /**
   * CommandeProduit findFirstOrThrow
   */
  export type CommandeProduitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
    /**
     * Filter, which CommandeProduit to fetch.
     */
    where?: CommandeProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeProduits to fetch.
     */
    orderBy?: CommandeProduitOrderByWithRelationInput | CommandeProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommandeProduits.
     */
    cursor?: CommandeProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeProduits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommandeProduits.
     */
    distinct?: CommandeProduitScalarFieldEnum | CommandeProduitScalarFieldEnum[]
  }

  /**
   * CommandeProduit findMany
   */
  export type CommandeProduitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
    /**
     * Filter, which CommandeProduits to fetch.
     */
    where?: CommandeProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandeProduits to fetch.
     */
    orderBy?: CommandeProduitOrderByWithRelationInput | CommandeProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommandeProduits.
     */
    cursor?: CommandeProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandeProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandeProduits.
     */
    skip?: number
    distinct?: CommandeProduitScalarFieldEnum | CommandeProduitScalarFieldEnum[]
  }

  /**
   * CommandeProduit create
   */
  export type CommandeProduitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
    /**
     * The data needed to create a CommandeProduit.
     */
    data: XOR<CommandeProduitCreateInput, CommandeProduitUncheckedCreateInput>
  }

  /**
   * CommandeProduit createMany
   */
  export type CommandeProduitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommandeProduits.
     */
    data: CommandeProduitCreateManyInput | CommandeProduitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommandeProduit createManyAndReturn
   */
  export type CommandeProduitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CommandeProduits.
     */
    data: CommandeProduitCreateManyInput | CommandeProduitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CommandeProduit update
   */
  export type CommandeProduitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
    /**
     * The data needed to update a CommandeProduit.
     */
    data: XOR<CommandeProduitUpdateInput, CommandeProduitUncheckedUpdateInput>
    /**
     * Choose, which CommandeProduit to update.
     */
    where: CommandeProduitWhereUniqueInput
  }

  /**
   * CommandeProduit updateMany
   */
  export type CommandeProduitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommandeProduits.
     */
    data: XOR<CommandeProduitUpdateManyMutationInput, CommandeProduitUncheckedUpdateManyInput>
    /**
     * Filter which CommandeProduits to update
     */
    where?: CommandeProduitWhereInput
  }

  /**
   * CommandeProduit upsert
   */
  export type CommandeProduitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
    /**
     * The filter to search for the CommandeProduit to update in case it exists.
     */
    where: CommandeProduitWhereUniqueInput
    /**
     * In case the CommandeProduit found by the `where` argument doesn't exist, create a new CommandeProduit with this data.
     */
    create: XOR<CommandeProduitCreateInput, CommandeProduitUncheckedCreateInput>
    /**
     * In case the CommandeProduit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommandeProduitUpdateInput, CommandeProduitUncheckedUpdateInput>
  }

  /**
   * CommandeProduit delete
   */
  export type CommandeProduitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
    /**
     * Filter which CommandeProduit to delete.
     */
    where: CommandeProduitWhereUniqueInput
  }

  /**
   * CommandeProduit deleteMany
   */
  export type CommandeProduitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommandeProduits to delete
     */
    where?: CommandeProduitWhereInput
  }

  /**
   * CommandeProduit without action
   */
  export type CommandeProduitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandeProduit
     */
    select?: CommandeProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandeProduitInclude<ExtArgs> | null
  }


  /**
   * Model Paiement
   */

  export type AggregatePaiement = {
    _count: PaiementCountAggregateOutputType | null
    _avg: PaiementAvgAggregateOutputType | null
    _sum: PaiementSumAggregateOutputType | null
    _min: PaiementMinAggregateOutputType | null
    _max: PaiementMaxAggregateOutputType | null
  }

  export type PaiementAvgAggregateOutputType = {
    id: number | null
    commandeId: number | null
    montant: number | null
  }

  export type PaiementSumAggregateOutputType = {
    id: number | null
    commandeId: number | null
    montant: number | null
  }

  export type PaiementMinAggregateOutputType = {
    id: number | null
    commandeId: number | null
    numeroVersement: string | null
    montant: number | null
    dateVersement: Date | null
  }

  export type PaiementMaxAggregateOutputType = {
    id: number | null
    commandeId: number | null
    numeroVersement: string | null
    montant: number | null
    dateVersement: Date | null
  }

  export type PaiementCountAggregateOutputType = {
    id: number
    commandeId: number
    numeroVersement: number
    montant: number
    dateVersement: number
    _all: number
  }


  export type PaiementAvgAggregateInputType = {
    id?: true
    commandeId?: true
    montant?: true
  }

  export type PaiementSumAggregateInputType = {
    id?: true
    commandeId?: true
    montant?: true
  }

  export type PaiementMinAggregateInputType = {
    id?: true
    commandeId?: true
    numeroVersement?: true
    montant?: true
    dateVersement?: true
  }

  export type PaiementMaxAggregateInputType = {
    id?: true
    commandeId?: true
    numeroVersement?: true
    montant?: true
    dateVersement?: true
  }

  export type PaiementCountAggregateInputType = {
    id?: true
    commandeId?: true
    numeroVersement?: true
    montant?: true
    dateVersement?: true
    _all?: true
  }

  export type PaiementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paiement to aggregate.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Paiements
    **/
    _count?: true | PaiementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaiementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaiementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaiementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaiementMaxAggregateInputType
  }

  export type GetPaiementAggregateType<T extends PaiementAggregateArgs> = {
        [P in keyof T & keyof AggregatePaiement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaiement[P]>
      : GetScalarType<T[P], AggregatePaiement[P]>
  }




  export type PaiementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementWhereInput
    orderBy?: PaiementOrderByWithAggregationInput | PaiementOrderByWithAggregationInput[]
    by: PaiementScalarFieldEnum[] | PaiementScalarFieldEnum
    having?: PaiementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaiementCountAggregateInputType | true
    _avg?: PaiementAvgAggregateInputType
    _sum?: PaiementSumAggregateInputType
    _min?: PaiementMinAggregateInputType
    _max?: PaiementMaxAggregateInputType
  }

  export type PaiementGroupByOutputType = {
    id: number
    commandeId: number
    numeroVersement: string
    montant: number
    dateVersement: Date
    _count: PaiementCountAggregateOutputType | null
    _avg: PaiementAvgAggregateOutputType | null
    _sum: PaiementSumAggregateOutputType | null
    _min: PaiementMinAggregateOutputType | null
    _max: PaiementMaxAggregateOutputType | null
  }

  type GetPaiementGroupByPayload<T extends PaiementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaiementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaiementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaiementGroupByOutputType[P]>
            : GetScalarType<T[P], PaiementGroupByOutputType[P]>
        }
      >
    >


  export type PaiementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    commandeId?: boolean
    numeroVersement?: boolean
    montant?: boolean
    dateVersement?: boolean
    commande?: boolean | CommandeFournisseurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paiement"]>

  export type PaiementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    commandeId?: boolean
    numeroVersement?: boolean
    montant?: boolean
    dateVersement?: boolean
    commande?: boolean | CommandeFournisseurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paiement"]>

  export type PaiementSelectScalar = {
    id?: boolean
    commandeId?: boolean
    numeroVersement?: boolean
    montant?: boolean
    dateVersement?: boolean
  }

  export type PaiementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | CommandeFournisseurDefaultArgs<ExtArgs>
  }
  export type PaiementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commande?: boolean | CommandeFournisseurDefaultArgs<ExtArgs>
  }

  export type $PaiementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Paiement"
    objects: {
      commande: Prisma.$CommandeFournisseurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      commandeId: number
      numeroVersement: string
      montant: number
      dateVersement: Date
    }, ExtArgs["result"]["paiement"]>
    composites: {}
  }

  type PaiementGetPayload<S extends boolean | null | undefined | PaiementDefaultArgs> = $Result.GetResult<Prisma.$PaiementPayload, S>

  type PaiementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaiementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaiementCountAggregateInputType | true
    }

  export interface PaiementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Paiement'], meta: { name: 'Paiement' } }
    /**
     * Find zero or one Paiement that matches the filter.
     * @param {PaiementFindUniqueArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaiementFindUniqueArgs>(args: SelectSubset<T, PaiementFindUniqueArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Paiement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaiementFindUniqueOrThrowArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaiementFindUniqueOrThrowArgs>(args: SelectSubset<T, PaiementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Paiement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementFindFirstArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaiementFindFirstArgs>(args?: SelectSubset<T, PaiementFindFirstArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Paiement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementFindFirstOrThrowArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaiementFindFirstOrThrowArgs>(args?: SelectSubset<T, PaiementFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Paiements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paiements
     * const paiements = await prisma.paiement.findMany()
     * 
     * // Get first 10 Paiements
     * const paiements = await prisma.paiement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paiementWithIdOnly = await prisma.paiement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaiementFindManyArgs>(args?: SelectSubset<T, PaiementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Paiement.
     * @param {PaiementCreateArgs} args - Arguments to create a Paiement.
     * @example
     * // Create one Paiement
     * const Paiement = await prisma.paiement.create({
     *   data: {
     *     // ... data to create a Paiement
     *   }
     * })
     * 
     */
    create<T extends PaiementCreateArgs>(args: SelectSubset<T, PaiementCreateArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Paiements.
     * @param {PaiementCreateManyArgs} args - Arguments to create many Paiements.
     * @example
     * // Create many Paiements
     * const paiement = await prisma.paiement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaiementCreateManyArgs>(args?: SelectSubset<T, PaiementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Paiements and returns the data saved in the database.
     * @param {PaiementCreateManyAndReturnArgs} args - Arguments to create many Paiements.
     * @example
     * // Create many Paiements
     * const paiement = await prisma.paiement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Paiements and only return the `id`
     * const paiementWithIdOnly = await prisma.paiement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaiementCreateManyAndReturnArgs>(args?: SelectSubset<T, PaiementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Paiement.
     * @param {PaiementDeleteArgs} args - Arguments to delete one Paiement.
     * @example
     * // Delete one Paiement
     * const Paiement = await prisma.paiement.delete({
     *   where: {
     *     // ... filter to delete one Paiement
     *   }
     * })
     * 
     */
    delete<T extends PaiementDeleteArgs>(args: SelectSubset<T, PaiementDeleteArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Paiement.
     * @param {PaiementUpdateArgs} args - Arguments to update one Paiement.
     * @example
     * // Update one Paiement
     * const paiement = await prisma.paiement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaiementUpdateArgs>(args: SelectSubset<T, PaiementUpdateArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Paiements.
     * @param {PaiementDeleteManyArgs} args - Arguments to filter Paiements to delete.
     * @example
     * // Delete a few Paiements
     * const { count } = await prisma.paiement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaiementDeleteManyArgs>(args?: SelectSubset<T, PaiementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paiements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paiements
     * const paiement = await prisma.paiement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaiementUpdateManyArgs>(args: SelectSubset<T, PaiementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Paiement.
     * @param {PaiementUpsertArgs} args - Arguments to update or create a Paiement.
     * @example
     * // Update or create a Paiement
     * const paiement = await prisma.paiement.upsert({
     *   create: {
     *     // ... data to create a Paiement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paiement we want to update
     *   }
     * })
     */
    upsert<T extends PaiementUpsertArgs>(args: SelectSubset<T, PaiementUpsertArgs<ExtArgs>>): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Paiements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementCountArgs} args - Arguments to filter Paiements to count.
     * @example
     * // Count the number of Paiements
     * const count = await prisma.paiement.count({
     *   where: {
     *     // ... the filter for the Paiements we want to count
     *   }
     * })
    **/
    count<T extends PaiementCountArgs>(
      args?: Subset<T, PaiementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaiementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paiement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaiementAggregateArgs>(args: Subset<T, PaiementAggregateArgs>): Prisma.PrismaPromise<GetPaiementAggregateType<T>>

    /**
     * Group by Paiement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaiementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaiementGroupByArgs['orderBy'] }
        : { orderBy?: PaiementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaiementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaiementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Paiement model
   */
  readonly fields: PaiementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Paiement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaiementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    commande<T extends CommandeFournisseurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommandeFournisseurDefaultArgs<ExtArgs>>): Prisma__CommandeFournisseurClient<$Result.GetResult<Prisma.$CommandeFournisseurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Paiement model
   */ 
  interface PaiementFieldRefs {
    readonly id: FieldRef<"Paiement", 'Int'>
    readonly commandeId: FieldRef<"Paiement", 'Int'>
    readonly numeroVersement: FieldRef<"Paiement", 'String'>
    readonly montant: FieldRef<"Paiement", 'Float'>
    readonly dateVersement: FieldRef<"Paiement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Paiement findUnique
   */
  export type PaiementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement findUniqueOrThrow
   */
  export type PaiementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement findFirst
   */
  export type PaiementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paiements.
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paiements.
     */
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Paiement findFirstOrThrow
   */
  export type PaiementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paiements.
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paiements.
     */
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Paiement findMany
   */
  export type PaiementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiements to fetch.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Paiements.
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Paiement create
   */
  export type PaiementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * The data needed to create a Paiement.
     */
    data: XOR<PaiementCreateInput, PaiementUncheckedCreateInput>
  }

  /**
   * Paiement createMany
   */
  export type PaiementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Paiements.
     */
    data: PaiementCreateManyInput | PaiementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Paiement createManyAndReturn
   */
  export type PaiementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Paiements.
     */
    data: PaiementCreateManyInput | PaiementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Paiement update
   */
  export type PaiementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * The data needed to update a Paiement.
     */
    data: XOR<PaiementUpdateInput, PaiementUncheckedUpdateInput>
    /**
     * Choose, which Paiement to update.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement updateMany
   */
  export type PaiementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Paiements.
     */
    data: XOR<PaiementUpdateManyMutationInput, PaiementUncheckedUpdateManyInput>
    /**
     * Filter which Paiements to update
     */
    where?: PaiementWhereInput
  }

  /**
   * Paiement upsert
   */
  export type PaiementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * The filter to search for the Paiement to update in case it exists.
     */
    where: PaiementWhereUniqueInput
    /**
     * In case the Paiement found by the `where` argument doesn't exist, create a new Paiement with this data.
     */
    create: XOR<PaiementCreateInput, PaiementUncheckedCreateInput>
    /**
     * In case the Paiement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaiementUpdateInput, PaiementUncheckedUpdateInput>
  }

  /**
   * Paiement delete
   */
  export type PaiementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter which Paiement to delete.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement deleteMany
   */
  export type PaiementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paiements to delete
     */
    where?: PaiementWhereInput
  }

  /**
   * Paiement without action
   */
  export type PaiementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
  }


  /**
   * Model Utilisateur
   */

  export type AggregateUtilisateur = {
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  export type UtilisateurAvgAggregateOutputType = {
    id: number | null
  }

  export type UtilisateurSumAggregateOutputType = {
    id: number | null
  }

  export type UtilisateurMinAggregateOutputType = {
    id: number | null
    nom: string | null
    email: string | null
    password: string | null
    role: $Enums.RoleUtilisateur | null
  }

  export type UtilisateurMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    email: string | null
    password: string | null
    role: $Enums.RoleUtilisateur | null
  }

  export type UtilisateurCountAggregateOutputType = {
    id: number
    nom: number
    email: number
    password: number
    role: number
    _all: number
  }


  export type UtilisateurAvgAggregateInputType = {
    id?: true
  }

  export type UtilisateurSumAggregateInputType = {
    id?: true
  }

  export type UtilisateurMinAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    password?: true
    role?: true
  }

  export type UtilisateurMaxAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    password?: true
    role?: true
  }

  export type UtilisateurCountAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UtilisateurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateur to aggregate.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Utilisateurs
    **/
    _count?: true | UtilisateurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilisateurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilisateurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilisateurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilisateurMaxAggregateInputType
  }

  export type GetUtilisateurAggregateType<T extends UtilisateurAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilisateur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilisateur[P]>
      : GetScalarType<T[P], AggregateUtilisateur[P]>
  }




  export type UtilisateurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilisateurWhereInput
    orderBy?: UtilisateurOrderByWithAggregationInput | UtilisateurOrderByWithAggregationInput[]
    by: UtilisateurScalarFieldEnum[] | UtilisateurScalarFieldEnum
    having?: UtilisateurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilisateurCountAggregateInputType | true
    _avg?: UtilisateurAvgAggregateInputType
    _sum?: UtilisateurSumAggregateInputType
    _min?: UtilisateurMinAggregateInputType
    _max?: UtilisateurMaxAggregateInputType
  }

  export type UtilisateurGroupByOutputType = {
    id: number
    nom: string
    email: string
    password: string
    role: $Enums.RoleUtilisateur
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  type GetUtilisateurGroupByPayload<T extends UtilisateurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UtilisateurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilisateurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
            : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
        }
      >
    >


  export type UtilisateurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["utilisateur"]>

  export type UtilisateurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["utilisateur"]>

  export type UtilisateurSelectScalar = {
    id?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }


  export type $UtilisateurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Utilisateur"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      email: string
      password: string
      role: $Enums.RoleUtilisateur
    }, ExtArgs["result"]["utilisateur"]>
    composites: {}
  }

  type UtilisateurGetPayload<S extends boolean | null | undefined | UtilisateurDefaultArgs> = $Result.GetResult<Prisma.$UtilisateurPayload, S>

  type UtilisateurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UtilisateurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UtilisateurCountAggregateInputType | true
    }

  export interface UtilisateurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Utilisateur'], meta: { name: 'Utilisateur' } }
    /**
     * Find zero or one Utilisateur that matches the filter.
     * @param {UtilisateurFindUniqueArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UtilisateurFindUniqueArgs>(args: SelectSubset<T, UtilisateurFindUniqueArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Utilisateur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UtilisateurFindUniqueOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UtilisateurFindUniqueOrThrowArgs>(args: SelectSubset<T, UtilisateurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UtilisateurFindFirstArgs>(args?: SelectSubset<T, UtilisateurFindFirstArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UtilisateurFindFirstOrThrowArgs>(args?: SelectSubset<T, UtilisateurFindFirstOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Utilisateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany()
     * 
     * // Get first 10 Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const utilisateurWithIdOnly = await prisma.utilisateur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UtilisateurFindManyArgs>(args?: SelectSubset<T, UtilisateurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Utilisateur.
     * @param {UtilisateurCreateArgs} args - Arguments to create a Utilisateur.
     * @example
     * // Create one Utilisateur
     * const Utilisateur = await prisma.utilisateur.create({
     *   data: {
     *     // ... data to create a Utilisateur
     *   }
     * })
     * 
     */
    create<T extends UtilisateurCreateArgs>(args: SelectSubset<T, UtilisateurCreateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Utilisateurs.
     * @param {UtilisateurCreateManyArgs} args - Arguments to create many Utilisateurs.
     * @example
     * // Create many Utilisateurs
     * const utilisateur = await prisma.utilisateur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UtilisateurCreateManyArgs>(args?: SelectSubset<T, UtilisateurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Utilisateurs and returns the data saved in the database.
     * @param {UtilisateurCreateManyAndReturnArgs} args - Arguments to create many Utilisateurs.
     * @example
     * // Create many Utilisateurs
     * const utilisateur = await prisma.utilisateur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Utilisateurs and only return the `id`
     * const utilisateurWithIdOnly = await prisma.utilisateur.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UtilisateurCreateManyAndReturnArgs>(args?: SelectSubset<T, UtilisateurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Utilisateur.
     * @param {UtilisateurDeleteArgs} args - Arguments to delete one Utilisateur.
     * @example
     * // Delete one Utilisateur
     * const Utilisateur = await prisma.utilisateur.delete({
     *   where: {
     *     // ... filter to delete one Utilisateur
     *   }
     * })
     * 
     */
    delete<T extends UtilisateurDeleteArgs>(args: SelectSubset<T, UtilisateurDeleteArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Utilisateur.
     * @param {UtilisateurUpdateArgs} args - Arguments to update one Utilisateur.
     * @example
     * // Update one Utilisateur
     * const utilisateur = await prisma.utilisateur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UtilisateurUpdateArgs>(args: SelectSubset<T, UtilisateurUpdateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Utilisateurs.
     * @param {UtilisateurDeleteManyArgs} args - Arguments to filter Utilisateurs to delete.
     * @example
     * // Delete a few Utilisateurs
     * const { count } = await prisma.utilisateur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UtilisateurDeleteManyArgs>(args?: SelectSubset<T, UtilisateurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilisateurs
     * const utilisateur = await prisma.utilisateur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UtilisateurUpdateManyArgs>(args: SelectSubset<T, UtilisateurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilisateur.
     * @param {UtilisateurUpsertArgs} args - Arguments to update or create a Utilisateur.
     * @example
     * // Update or create a Utilisateur
     * const utilisateur = await prisma.utilisateur.upsert({
     *   create: {
     *     // ... data to create a Utilisateur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilisateur we want to update
     *   }
     * })
     */
    upsert<T extends UtilisateurUpsertArgs>(args: SelectSubset<T, UtilisateurUpsertArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurCountArgs} args - Arguments to filter Utilisateurs to count.
     * @example
     * // Count the number of Utilisateurs
     * const count = await prisma.utilisateur.count({
     *   where: {
     *     // ... the filter for the Utilisateurs we want to count
     *   }
     * })
    **/
    count<T extends UtilisateurCountArgs>(
      args?: Subset<T, UtilisateurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilisateurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilisateurAggregateArgs>(args: Subset<T, UtilisateurAggregateArgs>): Prisma.PrismaPromise<GetUtilisateurAggregateType<T>>

    /**
     * Group by Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UtilisateurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UtilisateurGroupByArgs['orderBy'] }
        : { orderBy?: UtilisateurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UtilisateurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilisateurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Utilisateur model
   */
  readonly fields: UtilisateurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Utilisateur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UtilisateurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Utilisateur model
   */ 
  interface UtilisateurFieldRefs {
    readonly id: FieldRef<"Utilisateur", 'Int'>
    readonly nom: FieldRef<"Utilisateur", 'String'>
    readonly email: FieldRef<"Utilisateur", 'String'>
    readonly password: FieldRef<"Utilisateur", 'String'>
    readonly role: FieldRef<"Utilisateur", 'RoleUtilisateur'>
  }
    

  // Custom InputTypes
  /**
   * Utilisateur findUnique
   */
  export type UtilisateurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findUniqueOrThrow
   */
  export type UtilisateurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findFirst
   */
  export type UtilisateurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findFirstOrThrow
   */
  export type UtilisateurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findMany
   */
  export type UtilisateurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter, which Utilisateurs to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur create
   */
  export type UtilisateurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * The data needed to create a Utilisateur.
     */
    data: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
  }

  /**
   * Utilisateur createMany
   */
  export type UtilisateurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Utilisateurs.
     */
    data: UtilisateurCreateManyInput | UtilisateurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Utilisateur createManyAndReturn
   */
  export type UtilisateurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Utilisateurs.
     */
    data: UtilisateurCreateManyInput | UtilisateurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Utilisateur update
   */
  export type UtilisateurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * The data needed to update a Utilisateur.
     */
    data: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
    /**
     * Choose, which Utilisateur to update.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur updateMany
   */
  export type UtilisateurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Utilisateurs.
     */
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyInput>
    /**
     * Filter which Utilisateurs to update
     */
    where?: UtilisateurWhereInput
  }

  /**
   * Utilisateur upsert
   */
  export type UtilisateurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * The filter to search for the Utilisateur to update in case it exists.
     */
    where: UtilisateurWhereUniqueInput
    /**
     * In case the Utilisateur found by the `where` argument doesn't exist, create a new Utilisateur with this data.
     */
    create: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
    /**
     * In case the Utilisateur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
  }

  /**
   * Utilisateur delete
   */
  export type UtilisateurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter which Utilisateur to delete.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur deleteMany
   */
  export type UtilisateurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateurs to delete
     */
    where?: UtilisateurWhereInput
  }

  /**
   * Utilisateur without action
   */
  export type UtilisateurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CategorieScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    description: 'description',
    deletedAt: 'deletedAt'
  };

  export type CategorieScalarFieldEnum = (typeof CategorieScalarFieldEnum)[keyof typeof CategorieScalarFieldEnum]


  export const SousCategorieScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    description: 'description',
    deletedAt: 'deletedAt',
    categorieId: 'categorieId'
  };

  export type SousCategorieScalarFieldEnum = (typeof SousCategorieScalarFieldEnum)[keyof typeof SousCategorieScalarFieldEnum]


  export const ProduitScalarFieldEnum: {
    id: 'id',
    code: 'code',
    designation: 'designation',
    stock: 'stock',
    prixUnitaire: 'prixUnitaire',
    image: 'image',
    deletedAt: 'deletedAt',
    sousCategorieId: 'sousCategorieId'
  };

  export type ProduitScalarFieldEnum = (typeof ProduitScalarFieldEnum)[keyof typeof ProduitScalarFieldEnum]


  export const FournisseurScalarFieldEnum: {
    id: 'id',
    numero: 'numero',
    nom: 'nom',
    adresse: 'adresse',
    deletedAt: 'deletedAt'
  };

  export type FournisseurScalarFieldEnum = (typeof FournisseurScalarFieldEnum)[keyof typeof FournisseurScalarFieldEnum]


  export const CommandeFournisseurScalarFieldEnum: {
    id: 'id',
    dateCommande: 'dateCommande',
    montantTotal: 'montantTotal',
    dateLivraisonPrevue: 'dateLivraisonPrevue',
    dateLivraisonReelle: 'dateLivraisonReelle',
    statut: 'statut',
    fournisseurId: 'fournisseurId'
  };

  export type CommandeFournisseurScalarFieldEnum = (typeof CommandeFournisseurScalarFieldEnum)[keyof typeof CommandeFournisseurScalarFieldEnum]


  export const CommandeProduitScalarFieldEnum: {
    id: 'id',
    commandeId: 'commandeId',
    produitId: 'produitId',
    quantite: 'quantite',
    prixAchat: 'prixAchat'
  };

  export type CommandeProduitScalarFieldEnum = (typeof CommandeProduitScalarFieldEnum)[keyof typeof CommandeProduitScalarFieldEnum]


  export const PaiementScalarFieldEnum: {
    id: 'id',
    commandeId: 'commandeId',
    numeroVersement: 'numeroVersement',
    montant: 'montant',
    dateVersement: 'dateVersement'
  };

  export type PaiementScalarFieldEnum = (typeof PaiementScalarFieldEnum)[keyof typeof PaiementScalarFieldEnum]


  export const UtilisateurScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    email: 'email',
    password: 'password',
    role: 'role'
  };

  export type UtilisateurScalarFieldEnum = (typeof UtilisateurScalarFieldEnum)[keyof typeof UtilisateurScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'StatutCommande'
   */
  export type EnumStatutCommandeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutCommande'>
    


  /**
   * Reference to a field of type 'StatutCommande[]'
   */
  export type ListEnumStatutCommandeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutCommande[]'>
    


  /**
   * Reference to a field of type 'RoleUtilisateur'
   */
  export type EnumRoleUtilisateurFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleUtilisateur'>
    


  /**
   * Reference to a field of type 'RoleUtilisateur[]'
   */
  export type ListEnumRoleUtilisateurFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleUtilisateur[]'>
    
  /**
   * Deep Input Types
   */


  export type CategorieWhereInput = {
    AND?: CategorieWhereInput | CategorieWhereInput[]
    OR?: CategorieWhereInput[]
    NOT?: CategorieWhereInput | CategorieWhereInput[]
    id?: IntFilter<"Categorie"> | number
    nom?: StringFilter<"Categorie"> | string
    description?: StringNullableFilter<"Categorie"> | string | null
    deletedAt?: DateTimeNullableFilter<"Categorie"> | Date | string | null
    sousCategories?: SousCategorieListRelationFilter
  }

  export type CategorieOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    sousCategories?: SousCategorieOrderByRelationAggregateInput
  }

  export type CategorieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategorieWhereInput | CategorieWhereInput[]
    OR?: CategorieWhereInput[]
    NOT?: CategorieWhereInput | CategorieWhereInput[]
    nom?: StringFilter<"Categorie"> | string
    description?: StringNullableFilter<"Categorie"> | string | null
    deletedAt?: DateTimeNullableFilter<"Categorie"> | Date | string | null
    sousCategories?: SousCategorieListRelationFilter
  }, "id">

  export type CategorieOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: CategorieCountOrderByAggregateInput
    _avg?: CategorieAvgOrderByAggregateInput
    _max?: CategorieMaxOrderByAggregateInput
    _min?: CategorieMinOrderByAggregateInput
    _sum?: CategorieSumOrderByAggregateInput
  }

  export type CategorieScalarWhereWithAggregatesInput = {
    AND?: CategorieScalarWhereWithAggregatesInput | CategorieScalarWhereWithAggregatesInput[]
    OR?: CategorieScalarWhereWithAggregatesInput[]
    NOT?: CategorieScalarWhereWithAggregatesInput | CategorieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categorie"> | number
    nom?: StringWithAggregatesFilter<"Categorie"> | string
    description?: StringNullableWithAggregatesFilter<"Categorie"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Categorie"> | Date | string | null
  }

  export type SousCategorieWhereInput = {
    AND?: SousCategorieWhereInput | SousCategorieWhereInput[]
    OR?: SousCategorieWhereInput[]
    NOT?: SousCategorieWhereInput | SousCategorieWhereInput[]
    id?: IntFilter<"SousCategorie"> | number
    nom?: StringFilter<"SousCategorie"> | string
    description?: StringNullableFilter<"SousCategorie"> | string | null
    deletedAt?: DateTimeNullableFilter<"SousCategorie"> | Date | string | null
    categorieId?: IntFilter<"SousCategorie"> | number
    categorie?: XOR<CategorieRelationFilter, CategorieWhereInput>
    produits?: ProduitListRelationFilter
  }

  export type SousCategorieOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    categorieId?: SortOrder
    categorie?: CategorieOrderByWithRelationInput
    produits?: ProduitOrderByRelationAggregateInput
  }

  export type SousCategorieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SousCategorieWhereInput | SousCategorieWhereInput[]
    OR?: SousCategorieWhereInput[]
    NOT?: SousCategorieWhereInput | SousCategorieWhereInput[]
    nom?: StringFilter<"SousCategorie"> | string
    description?: StringNullableFilter<"SousCategorie"> | string | null
    deletedAt?: DateTimeNullableFilter<"SousCategorie"> | Date | string | null
    categorieId?: IntFilter<"SousCategorie"> | number
    categorie?: XOR<CategorieRelationFilter, CategorieWhereInput>
    produits?: ProduitListRelationFilter
  }, "id">

  export type SousCategorieOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    categorieId?: SortOrder
    _count?: SousCategorieCountOrderByAggregateInput
    _avg?: SousCategorieAvgOrderByAggregateInput
    _max?: SousCategorieMaxOrderByAggregateInput
    _min?: SousCategorieMinOrderByAggregateInput
    _sum?: SousCategorieSumOrderByAggregateInput
  }

  export type SousCategorieScalarWhereWithAggregatesInput = {
    AND?: SousCategorieScalarWhereWithAggregatesInput | SousCategorieScalarWhereWithAggregatesInput[]
    OR?: SousCategorieScalarWhereWithAggregatesInput[]
    NOT?: SousCategorieScalarWhereWithAggregatesInput | SousCategorieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SousCategorie"> | number
    nom?: StringWithAggregatesFilter<"SousCategorie"> | string
    description?: StringNullableWithAggregatesFilter<"SousCategorie"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"SousCategorie"> | Date | string | null
    categorieId?: IntWithAggregatesFilter<"SousCategorie"> | number
  }

  export type ProduitWhereInput = {
    AND?: ProduitWhereInput | ProduitWhereInput[]
    OR?: ProduitWhereInput[]
    NOT?: ProduitWhereInput | ProduitWhereInput[]
    id?: IntFilter<"Produit"> | number
    code?: StringFilter<"Produit"> | string
    designation?: StringFilter<"Produit"> | string
    stock?: IntFilter<"Produit"> | number
    prixUnitaire?: FloatFilter<"Produit"> | number
    image?: StringNullableFilter<"Produit"> | string | null
    deletedAt?: DateTimeNullableFilter<"Produit"> | Date | string | null
    sousCategorieId?: IntFilter<"Produit"> | number
    sousCategorie?: XOR<SousCategorieRelationFilter, SousCategorieWhereInput>
    commandes?: CommandeProduitListRelationFilter
  }

  export type ProduitOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    designation?: SortOrder
    stock?: SortOrder
    prixUnitaire?: SortOrder
    image?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    sousCategorieId?: SortOrder
    sousCategorie?: SousCategorieOrderByWithRelationInput
    commandes?: CommandeProduitOrderByRelationAggregateInput
  }

  export type ProduitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: ProduitWhereInput | ProduitWhereInput[]
    OR?: ProduitWhereInput[]
    NOT?: ProduitWhereInput | ProduitWhereInput[]
    designation?: StringFilter<"Produit"> | string
    stock?: IntFilter<"Produit"> | number
    prixUnitaire?: FloatFilter<"Produit"> | number
    image?: StringNullableFilter<"Produit"> | string | null
    deletedAt?: DateTimeNullableFilter<"Produit"> | Date | string | null
    sousCategorieId?: IntFilter<"Produit"> | number
    sousCategorie?: XOR<SousCategorieRelationFilter, SousCategorieWhereInput>
    commandes?: CommandeProduitListRelationFilter
  }, "id" | "code">

  export type ProduitOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    designation?: SortOrder
    stock?: SortOrder
    prixUnitaire?: SortOrder
    image?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    sousCategorieId?: SortOrder
    _count?: ProduitCountOrderByAggregateInput
    _avg?: ProduitAvgOrderByAggregateInput
    _max?: ProduitMaxOrderByAggregateInput
    _min?: ProduitMinOrderByAggregateInput
    _sum?: ProduitSumOrderByAggregateInput
  }

  export type ProduitScalarWhereWithAggregatesInput = {
    AND?: ProduitScalarWhereWithAggregatesInput | ProduitScalarWhereWithAggregatesInput[]
    OR?: ProduitScalarWhereWithAggregatesInput[]
    NOT?: ProduitScalarWhereWithAggregatesInput | ProduitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produit"> | number
    code?: StringWithAggregatesFilter<"Produit"> | string
    designation?: StringWithAggregatesFilter<"Produit"> | string
    stock?: IntWithAggregatesFilter<"Produit"> | number
    prixUnitaire?: FloatWithAggregatesFilter<"Produit"> | number
    image?: StringNullableWithAggregatesFilter<"Produit"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Produit"> | Date | string | null
    sousCategorieId?: IntWithAggregatesFilter<"Produit"> | number
  }

  export type FournisseurWhereInput = {
    AND?: FournisseurWhereInput | FournisseurWhereInput[]
    OR?: FournisseurWhereInput[]
    NOT?: FournisseurWhereInput | FournisseurWhereInput[]
    id?: IntFilter<"Fournisseur"> | number
    numero?: StringFilter<"Fournisseur"> | string
    nom?: StringFilter<"Fournisseur"> | string
    adresse?: StringFilter<"Fournisseur"> | string
    deletedAt?: DateTimeNullableFilter<"Fournisseur"> | Date | string | null
    commandes?: CommandeFournisseurListRelationFilter
  }

  export type FournisseurOrderByWithRelationInput = {
    id?: SortOrder
    numero?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    commandes?: CommandeFournisseurOrderByRelationAggregateInput
  }

  export type FournisseurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    numero?: string
    AND?: FournisseurWhereInput | FournisseurWhereInput[]
    OR?: FournisseurWhereInput[]
    NOT?: FournisseurWhereInput | FournisseurWhereInput[]
    nom?: StringFilter<"Fournisseur"> | string
    adresse?: StringFilter<"Fournisseur"> | string
    deletedAt?: DateTimeNullableFilter<"Fournisseur"> | Date | string | null
    commandes?: CommandeFournisseurListRelationFilter
  }, "id" | "numero">

  export type FournisseurOrderByWithAggregationInput = {
    id?: SortOrder
    numero?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: FournisseurCountOrderByAggregateInput
    _avg?: FournisseurAvgOrderByAggregateInput
    _max?: FournisseurMaxOrderByAggregateInput
    _min?: FournisseurMinOrderByAggregateInput
    _sum?: FournisseurSumOrderByAggregateInput
  }

  export type FournisseurScalarWhereWithAggregatesInput = {
    AND?: FournisseurScalarWhereWithAggregatesInput | FournisseurScalarWhereWithAggregatesInput[]
    OR?: FournisseurScalarWhereWithAggregatesInput[]
    NOT?: FournisseurScalarWhereWithAggregatesInput | FournisseurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Fournisseur"> | number
    numero?: StringWithAggregatesFilter<"Fournisseur"> | string
    nom?: StringWithAggregatesFilter<"Fournisseur"> | string
    adresse?: StringWithAggregatesFilter<"Fournisseur"> | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Fournisseur"> | Date | string | null
  }

  export type CommandeFournisseurWhereInput = {
    AND?: CommandeFournisseurWhereInput | CommandeFournisseurWhereInput[]
    OR?: CommandeFournisseurWhereInput[]
    NOT?: CommandeFournisseurWhereInput | CommandeFournisseurWhereInput[]
    id?: IntFilter<"CommandeFournisseur"> | number
    dateCommande?: DateTimeFilter<"CommandeFournisseur"> | Date | string
    montantTotal?: FloatFilter<"CommandeFournisseur"> | number
    dateLivraisonPrevue?: DateTimeNullableFilter<"CommandeFournisseur"> | Date | string | null
    dateLivraisonReelle?: DateTimeNullableFilter<"CommandeFournisseur"> | Date | string | null
    statut?: EnumStatutCommandeFilter<"CommandeFournisseur"> | $Enums.StatutCommande
    fournisseurId?: IntFilter<"CommandeFournisseur"> | number
    fournisseur?: XOR<FournisseurRelationFilter, FournisseurWhereInput>
    produits?: CommandeProduitListRelationFilter
    paiements?: PaiementListRelationFilter
  }

  export type CommandeFournisseurOrderByWithRelationInput = {
    id?: SortOrder
    dateCommande?: SortOrder
    montantTotal?: SortOrder
    dateLivraisonPrevue?: SortOrderInput | SortOrder
    dateLivraisonReelle?: SortOrderInput | SortOrder
    statut?: SortOrder
    fournisseurId?: SortOrder
    fournisseur?: FournisseurOrderByWithRelationInput
    produits?: CommandeProduitOrderByRelationAggregateInput
    paiements?: PaiementOrderByRelationAggregateInput
  }

  export type CommandeFournisseurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommandeFournisseurWhereInput | CommandeFournisseurWhereInput[]
    OR?: CommandeFournisseurWhereInput[]
    NOT?: CommandeFournisseurWhereInput | CommandeFournisseurWhereInput[]
    dateCommande?: DateTimeFilter<"CommandeFournisseur"> | Date | string
    montantTotal?: FloatFilter<"CommandeFournisseur"> | number
    dateLivraisonPrevue?: DateTimeNullableFilter<"CommandeFournisseur"> | Date | string | null
    dateLivraisonReelle?: DateTimeNullableFilter<"CommandeFournisseur"> | Date | string | null
    statut?: EnumStatutCommandeFilter<"CommandeFournisseur"> | $Enums.StatutCommande
    fournisseurId?: IntFilter<"CommandeFournisseur"> | number
    fournisseur?: XOR<FournisseurRelationFilter, FournisseurWhereInput>
    produits?: CommandeProduitListRelationFilter
    paiements?: PaiementListRelationFilter
  }, "id">

  export type CommandeFournisseurOrderByWithAggregationInput = {
    id?: SortOrder
    dateCommande?: SortOrder
    montantTotal?: SortOrder
    dateLivraisonPrevue?: SortOrderInput | SortOrder
    dateLivraisonReelle?: SortOrderInput | SortOrder
    statut?: SortOrder
    fournisseurId?: SortOrder
    _count?: CommandeFournisseurCountOrderByAggregateInput
    _avg?: CommandeFournisseurAvgOrderByAggregateInput
    _max?: CommandeFournisseurMaxOrderByAggregateInput
    _min?: CommandeFournisseurMinOrderByAggregateInput
    _sum?: CommandeFournisseurSumOrderByAggregateInput
  }

  export type CommandeFournisseurScalarWhereWithAggregatesInput = {
    AND?: CommandeFournisseurScalarWhereWithAggregatesInput | CommandeFournisseurScalarWhereWithAggregatesInput[]
    OR?: CommandeFournisseurScalarWhereWithAggregatesInput[]
    NOT?: CommandeFournisseurScalarWhereWithAggregatesInput | CommandeFournisseurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CommandeFournisseur"> | number
    dateCommande?: DateTimeWithAggregatesFilter<"CommandeFournisseur"> | Date | string
    montantTotal?: FloatWithAggregatesFilter<"CommandeFournisseur"> | number
    dateLivraisonPrevue?: DateTimeNullableWithAggregatesFilter<"CommandeFournisseur"> | Date | string | null
    dateLivraisonReelle?: DateTimeNullableWithAggregatesFilter<"CommandeFournisseur"> | Date | string | null
    statut?: EnumStatutCommandeWithAggregatesFilter<"CommandeFournisseur"> | $Enums.StatutCommande
    fournisseurId?: IntWithAggregatesFilter<"CommandeFournisseur"> | number
  }

  export type CommandeProduitWhereInput = {
    AND?: CommandeProduitWhereInput | CommandeProduitWhereInput[]
    OR?: CommandeProduitWhereInput[]
    NOT?: CommandeProduitWhereInput | CommandeProduitWhereInput[]
    id?: IntFilter<"CommandeProduit"> | number
    commandeId?: IntFilter<"CommandeProduit"> | number
    produitId?: IntFilter<"CommandeProduit"> | number
    quantite?: IntFilter<"CommandeProduit"> | number
    prixAchat?: FloatFilter<"CommandeProduit"> | number
    commande?: XOR<CommandeFournisseurRelationFilter, CommandeFournisseurWhereInput>
    produit?: XOR<ProduitRelationFilter, ProduitWhereInput>
  }

  export type CommandeProduitOrderByWithRelationInput = {
    id?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixAchat?: SortOrder
    commande?: CommandeFournisseurOrderByWithRelationInput
    produit?: ProduitOrderByWithRelationInput
  }

  export type CommandeProduitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommandeProduitWhereInput | CommandeProduitWhereInput[]
    OR?: CommandeProduitWhereInput[]
    NOT?: CommandeProduitWhereInput | CommandeProduitWhereInput[]
    commandeId?: IntFilter<"CommandeProduit"> | number
    produitId?: IntFilter<"CommandeProduit"> | number
    quantite?: IntFilter<"CommandeProduit"> | number
    prixAchat?: FloatFilter<"CommandeProduit"> | number
    commande?: XOR<CommandeFournisseurRelationFilter, CommandeFournisseurWhereInput>
    produit?: XOR<ProduitRelationFilter, ProduitWhereInput>
  }, "id">

  export type CommandeProduitOrderByWithAggregationInput = {
    id?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixAchat?: SortOrder
    _count?: CommandeProduitCountOrderByAggregateInput
    _avg?: CommandeProduitAvgOrderByAggregateInput
    _max?: CommandeProduitMaxOrderByAggregateInput
    _min?: CommandeProduitMinOrderByAggregateInput
    _sum?: CommandeProduitSumOrderByAggregateInput
  }

  export type CommandeProduitScalarWhereWithAggregatesInput = {
    AND?: CommandeProduitScalarWhereWithAggregatesInput | CommandeProduitScalarWhereWithAggregatesInput[]
    OR?: CommandeProduitScalarWhereWithAggregatesInput[]
    NOT?: CommandeProduitScalarWhereWithAggregatesInput | CommandeProduitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CommandeProduit"> | number
    commandeId?: IntWithAggregatesFilter<"CommandeProduit"> | number
    produitId?: IntWithAggregatesFilter<"CommandeProduit"> | number
    quantite?: IntWithAggregatesFilter<"CommandeProduit"> | number
    prixAchat?: FloatWithAggregatesFilter<"CommandeProduit"> | number
  }

  export type PaiementWhereInput = {
    AND?: PaiementWhereInput | PaiementWhereInput[]
    OR?: PaiementWhereInput[]
    NOT?: PaiementWhereInput | PaiementWhereInput[]
    id?: IntFilter<"Paiement"> | number
    commandeId?: IntFilter<"Paiement"> | number
    numeroVersement?: StringFilter<"Paiement"> | string
    montant?: FloatFilter<"Paiement"> | number
    dateVersement?: DateTimeFilter<"Paiement"> | Date | string
    commande?: XOR<CommandeFournisseurRelationFilter, CommandeFournisseurWhereInput>
  }

  export type PaiementOrderByWithRelationInput = {
    id?: SortOrder
    commandeId?: SortOrder
    numeroVersement?: SortOrder
    montant?: SortOrder
    dateVersement?: SortOrder
    commande?: CommandeFournisseurOrderByWithRelationInput
  }

  export type PaiementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaiementWhereInput | PaiementWhereInput[]
    OR?: PaiementWhereInput[]
    NOT?: PaiementWhereInput | PaiementWhereInput[]
    commandeId?: IntFilter<"Paiement"> | number
    numeroVersement?: StringFilter<"Paiement"> | string
    montant?: FloatFilter<"Paiement"> | number
    dateVersement?: DateTimeFilter<"Paiement"> | Date | string
    commande?: XOR<CommandeFournisseurRelationFilter, CommandeFournisseurWhereInput>
  }, "id">

  export type PaiementOrderByWithAggregationInput = {
    id?: SortOrder
    commandeId?: SortOrder
    numeroVersement?: SortOrder
    montant?: SortOrder
    dateVersement?: SortOrder
    _count?: PaiementCountOrderByAggregateInput
    _avg?: PaiementAvgOrderByAggregateInput
    _max?: PaiementMaxOrderByAggregateInput
    _min?: PaiementMinOrderByAggregateInput
    _sum?: PaiementSumOrderByAggregateInput
  }

  export type PaiementScalarWhereWithAggregatesInput = {
    AND?: PaiementScalarWhereWithAggregatesInput | PaiementScalarWhereWithAggregatesInput[]
    OR?: PaiementScalarWhereWithAggregatesInput[]
    NOT?: PaiementScalarWhereWithAggregatesInput | PaiementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Paiement"> | number
    commandeId?: IntWithAggregatesFilter<"Paiement"> | number
    numeroVersement?: StringWithAggregatesFilter<"Paiement"> | string
    montant?: FloatWithAggregatesFilter<"Paiement"> | number
    dateVersement?: DateTimeWithAggregatesFilter<"Paiement"> | Date | string
  }

  export type UtilisateurWhereInput = {
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    id?: IntFilter<"Utilisateur"> | number
    nom?: StringFilter<"Utilisateur"> | string
    email?: StringFilter<"Utilisateur"> | string
    password?: StringFilter<"Utilisateur"> | string
    role?: EnumRoleUtilisateurFilter<"Utilisateur"> | $Enums.RoleUtilisateur
  }

  export type UtilisateurOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UtilisateurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    nom?: StringFilter<"Utilisateur"> | string
    password?: StringFilter<"Utilisateur"> | string
    role?: EnumRoleUtilisateurFilter<"Utilisateur"> | $Enums.RoleUtilisateur
  }, "id" | "email">

  export type UtilisateurOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UtilisateurCountOrderByAggregateInput
    _avg?: UtilisateurAvgOrderByAggregateInput
    _max?: UtilisateurMaxOrderByAggregateInput
    _min?: UtilisateurMinOrderByAggregateInput
    _sum?: UtilisateurSumOrderByAggregateInput
  }

  export type UtilisateurScalarWhereWithAggregatesInput = {
    AND?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    OR?: UtilisateurScalarWhereWithAggregatesInput[]
    NOT?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Utilisateur"> | number
    nom?: StringWithAggregatesFilter<"Utilisateur"> | string
    email?: StringWithAggregatesFilter<"Utilisateur"> | string
    password?: StringWithAggregatesFilter<"Utilisateur"> | string
    role?: EnumRoleUtilisateurWithAggregatesFilter<"Utilisateur"> | $Enums.RoleUtilisateur
  }

  export type CategorieCreateInput = {
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
    sousCategories?: SousCategorieCreateNestedManyWithoutCategorieInput
  }

  export type CategorieUncheckedCreateInput = {
    id?: number
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
    sousCategories?: SousCategorieUncheckedCreateNestedManyWithoutCategorieInput
  }

  export type CategorieUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sousCategories?: SousCategorieUpdateManyWithoutCategorieNestedInput
  }

  export type CategorieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sousCategories?: SousCategorieUncheckedUpdateManyWithoutCategorieNestedInput
  }

  export type CategorieCreateManyInput = {
    id?: number
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
  }

  export type CategorieUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategorieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SousCategorieCreateInput = {
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
    categorie: CategorieCreateNestedOneWithoutSousCategoriesInput
    produits?: ProduitCreateNestedManyWithoutSousCategorieInput
  }

  export type SousCategorieUncheckedCreateInput = {
    id?: number
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
    categorieId: number
    produits?: ProduitUncheckedCreateNestedManyWithoutSousCategorieInput
  }

  export type SousCategorieUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categorie?: CategorieUpdateOneRequiredWithoutSousCategoriesNestedInput
    produits?: ProduitUpdateManyWithoutSousCategorieNestedInput
  }

  export type SousCategorieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categorieId?: IntFieldUpdateOperationsInput | number
    produits?: ProduitUncheckedUpdateManyWithoutSousCategorieNestedInput
  }

  export type SousCategorieCreateManyInput = {
    id?: number
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
    categorieId: number
  }

  export type SousCategorieUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SousCategorieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categorieId?: IntFieldUpdateOperationsInput | number
  }

  export type ProduitCreateInput = {
    code: string
    designation: string
    stock: number
    prixUnitaire: number
    image?: string | null
    deletedAt?: Date | string | null
    sousCategorie: SousCategorieCreateNestedOneWithoutProduitsInput
    commandes?: CommandeProduitCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateInput = {
    id?: number
    code: string
    designation: string
    stock: number
    prixUnitaire: number
    image?: string | null
    deletedAt?: Date | string | null
    sousCategorieId: number
    commandes?: CommandeProduitUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sousCategorie?: SousCategorieUpdateOneRequiredWithoutProduitsNestedInput
    commandes?: CommandeProduitUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sousCategorieId?: IntFieldUpdateOperationsInput | number
    commandes?: CommandeProduitUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type ProduitCreateManyInput = {
    id?: number
    code: string
    designation: string
    stock: number
    prixUnitaire: number
    image?: string | null
    deletedAt?: Date | string | null
    sousCategorieId: number
  }

  export type ProduitUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProduitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sousCategorieId?: IntFieldUpdateOperationsInput | number
  }

  export type FournisseurCreateInput = {
    numero: string
    nom: string
    adresse: string
    deletedAt?: Date | string | null
    commandes?: CommandeFournisseurCreateNestedManyWithoutFournisseurInput
  }

  export type FournisseurUncheckedCreateInput = {
    id?: number
    numero: string
    nom: string
    adresse: string
    deletedAt?: Date | string | null
    commandes?: CommandeFournisseurUncheckedCreateNestedManyWithoutFournisseurInput
  }

  export type FournisseurUpdateInput = {
    numero?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commandes?: CommandeFournisseurUpdateManyWithoutFournisseurNestedInput
  }

  export type FournisseurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commandes?: CommandeFournisseurUncheckedUpdateManyWithoutFournisseurNestedInput
  }

  export type FournisseurCreateManyInput = {
    id?: number
    numero: string
    nom: string
    adresse: string
    deletedAt?: Date | string | null
  }

  export type FournisseurUpdateManyMutationInput = {
    numero?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FournisseurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CommandeFournisseurCreateInput = {
    dateCommande: Date | string
    montantTotal: number
    dateLivraisonPrevue?: Date | string | null
    dateLivraisonReelle?: Date | string | null
    statut: $Enums.StatutCommande
    fournisseur: FournisseurCreateNestedOneWithoutCommandesInput
    produits?: CommandeProduitCreateNestedManyWithoutCommandeInput
    paiements?: PaiementCreateNestedManyWithoutCommandeInput
  }

  export type CommandeFournisseurUncheckedCreateInput = {
    id?: number
    dateCommande: Date | string
    montantTotal: number
    dateLivraisonPrevue?: Date | string | null
    dateLivraisonReelle?: Date | string | null
    statut: $Enums.StatutCommande
    fournisseurId: number
    produits?: CommandeProduitUncheckedCreateNestedManyWithoutCommandeInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutCommandeInput
  }

  export type CommandeFournisseurUpdateInput = {
    dateCommande?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    dateLivraisonPrevue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLivraisonReelle?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statut?: EnumStatutCommandeFieldUpdateOperationsInput | $Enums.StatutCommande
    fournisseur?: FournisseurUpdateOneRequiredWithoutCommandesNestedInput
    produits?: CommandeProduitUpdateManyWithoutCommandeNestedInput
    paiements?: PaiementUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeFournisseurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCommande?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    dateLivraisonPrevue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLivraisonReelle?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statut?: EnumStatutCommandeFieldUpdateOperationsInput | $Enums.StatutCommande
    fournisseurId?: IntFieldUpdateOperationsInput | number
    produits?: CommandeProduitUncheckedUpdateManyWithoutCommandeNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeFournisseurCreateManyInput = {
    id?: number
    dateCommande: Date | string
    montantTotal: number
    dateLivraisonPrevue?: Date | string | null
    dateLivraisonReelle?: Date | string | null
    statut: $Enums.StatutCommande
    fournisseurId: number
  }

  export type CommandeFournisseurUpdateManyMutationInput = {
    dateCommande?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    dateLivraisonPrevue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLivraisonReelle?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statut?: EnumStatutCommandeFieldUpdateOperationsInput | $Enums.StatutCommande
  }

  export type CommandeFournisseurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCommande?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    dateLivraisonPrevue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLivraisonReelle?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statut?: EnumStatutCommandeFieldUpdateOperationsInput | $Enums.StatutCommande
    fournisseurId?: IntFieldUpdateOperationsInput | number
  }

  export type CommandeProduitCreateInput = {
    quantite: number
    prixAchat: number
    commande: CommandeFournisseurCreateNestedOneWithoutProduitsInput
    produit: ProduitCreateNestedOneWithoutCommandesInput
  }

  export type CommandeProduitUncheckedCreateInput = {
    id?: number
    commandeId: number
    produitId: number
    quantite: number
    prixAchat: number
  }

  export type CommandeProduitUpdateInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixAchat?: FloatFieldUpdateOperationsInput | number
    commande?: CommandeFournisseurUpdateOneRequiredWithoutProduitsNestedInput
    produit?: ProduitUpdateOneRequiredWithoutCommandesNestedInput
  }

  export type CommandeProduitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandeId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixAchat?: FloatFieldUpdateOperationsInput | number
  }

  export type CommandeProduitCreateManyInput = {
    id?: number
    commandeId: number
    produitId: number
    quantite: number
    prixAchat: number
  }

  export type CommandeProduitUpdateManyMutationInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixAchat?: FloatFieldUpdateOperationsInput | number
  }

  export type CommandeProduitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandeId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixAchat?: FloatFieldUpdateOperationsInput | number
  }

  export type PaiementCreateInput = {
    numeroVersement: string
    montant: number
    dateVersement: Date | string
    commande: CommandeFournisseurCreateNestedOneWithoutPaiementsInput
  }

  export type PaiementUncheckedCreateInput = {
    id?: number
    commandeId: number
    numeroVersement: string
    montant: number
    dateVersement: Date | string
  }

  export type PaiementUpdateInput = {
    numeroVersement?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    dateVersement?: DateTimeFieldUpdateOperationsInput | Date | string
    commande?: CommandeFournisseurUpdateOneRequiredWithoutPaiementsNestedInput
  }

  export type PaiementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandeId?: IntFieldUpdateOperationsInput | number
    numeroVersement?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    dateVersement?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaiementCreateManyInput = {
    id?: number
    commandeId: number
    numeroVersement: string
    montant: number
    dateVersement: Date | string
  }

  export type PaiementUpdateManyMutationInput = {
    numeroVersement?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    dateVersement?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaiementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandeId?: IntFieldUpdateOperationsInput | number
    numeroVersement?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    dateVersement?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UtilisateurCreateInput = {
    nom: string
    email: string
    password: string
    role: $Enums.RoleUtilisateur
  }

  export type UtilisateurUncheckedCreateInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: $Enums.RoleUtilisateur
  }

  export type UtilisateurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
  }

  export type UtilisateurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
  }

  export type UtilisateurCreateManyInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: $Enums.RoleUtilisateur
  }

  export type UtilisateurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
  }

  export type UtilisateurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleUtilisateurFieldUpdateOperationsInput | $Enums.RoleUtilisateur
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SousCategorieListRelationFilter = {
    every?: SousCategorieWhereInput
    some?: SousCategorieWhereInput
    none?: SousCategorieWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SousCategorieOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategorieCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
  }

  export type CategorieAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategorieMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
  }

  export type CategorieMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
  }

  export type CategorieSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CategorieRelationFilter = {
    is?: CategorieWhereInput
    isNot?: CategorieWhereInput
  }

  export type ProduitListRelationFilter = {
    every?: ProduitWhereInput
    some?: ProduitWhereInput
    none?: ProduitWhereInput
  }

  export type ProduitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SousCategorieCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
    categorieId?: SortOrder
  }

  export type SousCategorieAvgOrderByAggregateInput = {
    id?: SortOrder
    categorieId?: SortOrder
  }

  export type SousCategorieMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
    categorieId?: SortOrder
  }

  export type SousCategorieMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
    categorieId?: SortOrder
  }

  export type SousCategorieSumOrderByAggregateInput = {
    id?: SortOrder
    categorieId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SousCategorieRelationFilter = {
    is?: SousCategorieWhereInput
    isNot?: SousCategorieWhereInput
  }

  export type CommandeProduitListRelationFilter = {
    every?: CommandeProduitWhereInput
    some?: CommandeProduitWhereInput
    none?: CommandeProduitWhereInput
  }

  export type CommandeProduitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProduitCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    designation?: SortOrder
    stock?: SortOrder
    prixUnitaire?: SortOrder
    image?: SortOrder
    deletedAt?: SortOrder
    sousCategorieId?: SortOrder
  }

  export type ProduitAvgOrderByAggregateInput = {
    id?: SortOrder
    stock?: SortOrder
    prixUnitaire?: SortOrder
    sousCategorieId?: SortOrder
  }

  export type ProduitMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    designation?: SortOrder
    stock?: SortOrder
    prixUnitaire?: SortOrder
    image?: SortOrder
    deletedAt?: SortOrder
    sousCategorieId?: SortOrder
  }

  export type ProduitMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    designation?: SortOrder
    stock?: SortOrder
    prixUnitaire?: SortOrder
    image?: SortOrder
    deletedAt?: SortOrder
    sousCategorieId?: SortOrder
  }

  export type ProduitSumOrderByAggregateInput = {
    id?: SortOrder
    stock?: SortOrder
    prixUnitaire?: SortOrder
    sousCategorieId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CommandeFournisseurListRelationFilter = {
    every?: CommandeFournisseurWhereInput
    some?: CommandeFournisseurWhereInput
    none?: CommandeFournisseurWhereInput
  }

  export type CommandeFournisseurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FournisseurCountOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    deletedAt?: SortOrder
  }

  export type FournisseurAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FournisseurMaxOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    deletedAt?: SortOrder
  }

  export type FournisseurMinOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    deletedAt?: SortOrder
  }

  export type FournisseurSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumStatutCommandeFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutCommande | EnumStatutCommandeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutCommande[] | ListEnumStatutCommandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutCommande[] | ListEnumStatutCommandeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutCommandeFilter<$PrismaModel> | $Enums.StatutCommande
  }

  export type FournisseurRelationFilter = {
    is?: FournisseurWhereInput
    isNot?: FournisseurWhereInput
  }

  export type PaiementListRelationFilter = {
    every?: PaiementWhereInput
    some?: PaiementWhereInput
    none?: PaiementWhereInput
  }

  export type PaiementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommandeFournisseurCountOrderByAggregateInput = {
    id?: SortOrder
    dateCommande?: SortOrder
    montantTotal?: SortOrder
    dateLivraisonPrevue?: SortOrder
    dateLivraisonReelle?: SortOrder
    statut?: SortOrder
    fournisseurId?: SortOrder
  }

  export type CommandeFournisseurAvgOrderByAggregateInput = {
    id?: SortOrder
    montantTotal?: SortOrder
    fournisseurId?: SortOrder
  }

  export type CommandeFournisseurMaxOrderByAggregateInput = {
    id?: SortOrder
    dateCommande?: SortOrder
    montantTotal?: SortOrder
    dateLivraisonPrevue?: SortOrder
    dateLivraisonReelle?: SortOrder
    statut?: SortOrder
    fournisseurId?: SortOrder
  }

  export type CommandeFournisseurMinOrderByAggregateInput = {
    id?: SortOrder
    dateCommande?: SortOrder
    montantTotal?: SortOrder
    dateLivraisonPrevue?: SortOrder
    dateLivraisonReelle?: SortOrder
    statut?: SortOrder
    fournisseurId?: SortOrder
  }

  export type CommandeFournisseurSumOrderByAggregateInput = {
    id?: SortOrder
    montantTotal?: SortOrder
    fournisseurId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumStatutCommandeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutCommande | EnumStatutCommandeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutCommande[] | ListEnumStatutCommandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutCommande[] | ListEnumStatutCommandeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutCommandeWithAggregatesFilter<$PrismaModel> | $Enums.StatutCommande
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutCommandeFilter<$PrismaModel>
    _max?: NestedEnumStatutCommandeFilter<$PrismaModel>
  }

  export type CommandeFournisseurRelationFilter = {
    is?: CommandeFournisseurWhereInput
    isNot?: CommandeFournisseurWhereInput
  }

  export type ProduitRelationFilter = {
    is?: ProduitWhereInput
    isNot?: ProduitWhereInput
  }

  export type CommandeProduitCountOrderByAggregateInput = {
    id?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixAchat?: SortOrder
  }

  export type CommandeProduitAvgOrderByAggregateInput = {
    id?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixAchat?: SortOrder
  }

  export type CommandeProduitMaxOrderByAggregateInput = {
    id?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixAchat?: SortOrder
  }

  export type CommandeProduitMinOrderByAggregateInput = {
    id?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixAchat?: SortOrder
  }

  export type CommandeProduitSumOrderByAggregateInput = {
    id?: SortOrder
    commandeId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    prixAchat?: SortOrder
  }

  export type PaiementCountOrderByAggregateInput = {
    id?: SortOrder
    commandeId?: SortOrder
    numeroVersement?: SortOrder
    montant?: SortOrder
    dateVersement?: SortOrder
  }

  export type PaiementAvgOrderByAggregateInput = {
    id?: SortOrder
    commandeId?: SortOrder
    montant?: SortOrder
  }

  export type PaiementMaxOrderByAggregateInput = {
    id?: SortOrder
    commandeId?: SortOrder
    numeroVersement?: SortOrder
    montant?: SortOrder
    dateVersement?: SortOrder
  }

  export type PaiementMinOrderByAggregateInput = {
    id?: SortOrder
    commandeId?: SortOrder
    numeroVersement?: SortOrder
    montant?: SortOrder
    dateVersement?: SortOrder
  }

  export type PaiementSumOrderByAggregateInput = {
    id?: SortOrder
    commandeId?: SortOrder
    montant?: SortOrder
  }

  export type EnumRoleUtilisateurFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleUtilisateur | EnumRoleUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.RoleUtilisateur[] | ListEnumRoleUtilisateurFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleUtilisateur[] | ListEnumRoleUtilisateurFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleUtilisateurFilter<$PrismaModel> | $Enums.RoleUtilisateur
  }

  export type UtilisateurCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UtilisateurAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UtilisateurMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UtilisateurMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UtilisateurSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumRoleUtilisateurWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleUtilisateur | EnumRoleUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.RoleUtilisateur[] | ListEnumRoleUtilisateurFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleUtilisateur[] | ListEnumRoleUtilisateurFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleUtilisateurWithAggregatesFilter<$PrismaModel> | $Enums.RoleUtilisateur
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleUtilisateurFilter<$PrismaModel>
    _max?: NestedEnumRoleUtilisateurFilter<$PrismaModel>
  }

  export type SousCategorieCreateNestedManyWithoutCategorieInput = {
    create?: XOR<SousCategorieCreateWithoutCategorieInput, SousCategorieUncheckedCreateWithoutCategorieInput> | SousCategorieCreateWithoutCategorieInput[] | SousCategorieUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: SousCategorieCreateOrConnectWithoutCategorieInput | SousCategorieCreateOrConnectWithoutCategorieInput[]
    createMany?: SousCategorieCreateManyCategorieInputEnvelope
    connect?: SousCategorieWhereUniqueInput | SousCategorieWhereUniqueInput[]
  }

  export type SousCategorieUncheckedCreateNestedManyWithoutCategorieInput = {
    create?: XOR<SousCategorieCreateWithoutCategorieInput, SousCategorieUncheckedCreateWithoutCategorieInput> | SousCategorieCreateWithoutCategorieInput[] | SousCategorieUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: SousCategorieCreateOrConnectWithoutCategorieInput | SousCategorieCreateOrConnectWithoutCategorieInput[]
    createMany?: SousCategorieCreateManyCategorieInputEnvelope
    connect?: SousCategorieWhereUniqueInput | SousCategorieWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SousCategorieUpdateManyWithoutCategorieNestedInput = {
    create?: XOR<SousCategorieCreateWithoutCategorieInput, SousCategorieUncheckedCreateWithoutCategorieInput> | SousCategorieCreateWithoutCategorieInput[] | SousCategorieUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: SousCategorieCreateOrConnectWithoutCategorieInput | SousCategorieCreateOrConnectWithoutCategorieInput[]
    upsert?: SousCategorieUpsertWithWhereUniqueWithoutCategorieInput | SousCategorieUpsertWithWhereUniqueWithoutCategorieInput[]
    createMany?: SousCategorieCreateManyCategorieInputEnvelope
    set?: SousCategorieWhereUniqueInput | SousCategorieWhereUniqueInput[]
    disconnect?: SousCategorieWhereUniqueInput | SousCategorieWhereUniqueInput[]
    delete?: SousCategorieWhereUniqueInput | SousCategorieWhereUniqueInput[]
    connect?: SousCategorieWhereUniqueInput | SousCategorieWhereUniqueInput[]
    update?: SousCategorieUpdateWithWhereUniqueWithoutCategorieInput | SousCategorieUpdateWithWhereUniqueWithoutCategorieInput[]
    updateMany?: SousCategorieUpdateManyWithWhereWithoutCategorieInput | SousCategorieUpdateManyWithWhereWithoutCategorieInput[]
    deleteMany?: SousCategorieScalarWhereInput | SousCategorieScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SousCategorieUncheckedUpdateManyWithoutCategorieNestedInput = {
    create?: XOR<SousCategorieCreateWithoutCategorieInput, SousCategorieUncheckedCreateWithoutCategorieInput> | SousCategorieCreateWithoutCategorieInput[] | SousCategorieUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: SousCategorieCreateOrConnectWithoutCategorieInput | SousCategorieCreateOrConnectWithoutCategorieInput[]
    upsert?: SousCategorieUpsertWithWhereUniqueWithoutCategorieInput | SousCategorieUpsertWithWhereUniqueWithoutCategorieInput[]
    createMany?: SousCategorieCreateManyCategorieInputEnvelope
    set?: SousCategorieWhereUniqueInput | SousCategorieWhereUniqueInput[]
    disconnect?: SousCategorieWhereUniqueInput | SousCategorieWhereUniqueInput[]
    delete?: SousCategorieWhereUniqueInput | SousCategorieWhereUniqueInput[]
    connect?: SousCategorieWhereUniqueInput | SousCategorieWhereUniqueInput[]
    update?: SousCategorieUpdateWithWhereUniqueWithoutCategorieInput | SousCategorieUpdateWithWhereUniqueWithoutCategorieInput[]
    updateMany?: SousCategorieUpdateManyWithWhereWithoutCategorieInput | SousCategorieUpdateManyWithWhereWithoutCategorieInput[]
    deleteMany?: SousCategorieScalarWhereInput | SousCategorieScalarWhereInput[]
  }

  export type CategorieCreateNestedOneWithoutSousCategoriesInput = {
    create?: XOR<CategorieCreateWithoutSousCategoriesInput, CategorieUncheckedCreateWithoutSousCategoriesInput>
    connectOrCreate?: CategorieCreateOrConnectWithoutSousCategoriesInput
    connect?: CategorieWhereUniqueInput
  }

  export type ProduitCreateNestedManyWithoutSousCategorieInput = {
    create?: XOR<ProduitCreateWithoutSousCategorieInput, ProduitUncheckedCreateWithoutSousCategorieInput> | ProduitCreateWithoutSousCategorieInput[] | ProduitUncheckedCreateWithoutSousCategorieInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutSousCategorieInput | ProduitCreateOrConnectWithoutSousCategorieInput[]
    createMany?: ProduitCreateManySousCategorieInputEnvelope
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
  }

  export type ProduitUncheckedCreateNestedManyWithoutSousCategorieInput = {
    create?: XOR<ProduitCreateWithoutSousCategorieInput, ProduitUncheckedCreateWithoutSousCategorieInput> | ProduitCreateWithoutSousCategorieInput[] | ProduitUncheckedCreateWithoutSousCategorieInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutSousCategorieInput | ProduitCreateOrConnectWithoutSousCategorieInput[]
    createMany?: ProduitCreateManySousCategorieInputEnvelope
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
  }

  export type CategorieUpdateOneRequiredWithoutSousCategoriesNestedInput = {
    create?: XOR<CategorieCreateWithoutSousCategoriesInput, CategorieUncheckedCreateWithoutSousCategoriesInput>
    connectOrCreate?: CategorieCreateOrConnectWithoutSousCategoriesInput
    upsert?: CategorieUpsertWithoutSousCategoriesInput
    connect?: CategorieWhereUniqueInput
    update?: XOR<XOR<CategorieUpdateToOneWithWhereWithoutSousCategoriesInput, CategorieUpdateWithoutSousCategoriesInput>, CategorieUncheckedUpdateWithoutSousCategoriesInput>
  }

  export type ProduitUpdateManyWithoutSousCategorieNestedInput = {
    create?: XOR<ProduitCreateWithoutSousCategorieInput, ProduitUncheckedCreateWithoutSousCategorieInput> | ProduitCreateWithoutSousCategorieInput[] | ProduitUncheckedCreateWithoutSousCategorieInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutSousCategorieInput | ProduitCreateOrConnectWithoutSousCategorieInput[]
    upsert?: ProduitUpsertWithWhereUniqueWithoutSousCategorieInput | ProduitUpsertWithWhereUniqueWithoutSousCategorieInput[]
    createMany?: ProduitCreateManySousCategorieInputEnvelope
    set?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    disconnect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    delete?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    update?: ProduitUpdateWithWhereUniqueWithoutSousCategorieInput | ProduitUpdateWithWhereUniqueWithoutSousCategorieInput[]
    updateMany?: ProduitUpdateManyWithWhereWithoutSousCategorieInput | ProduitUpdateManyWithWhereWithoutSousCategorieInput[]
    deleteMany?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
  }

  export type ProduitUncheckedUpdateManyWithoutSousCategorieNestedInput = {
    create?: XOR<ProduitCreateWithoutSousCategorieInput, ProduitUncheckedCreateWithoutSousCategorieInput> | ProduitCreateWithoutSousCategorieInput[] | ProduitUncheckedCreateWithoutSousCategorieInput[]
    connectOrCreate?: ProduitCreateOrConnectWithoutSousCategorieInput | ProduitCreateOrConnectWithoutSousCategorieInput[]
    upsert?: ProduitUpsertWithWhereUniqueWithoutSousCategorieInput | ProduitUpsertWithWhereUniqueWithoutSousCategorieInput[]
    createMany?: ProduitCreateManySousCategorieInputEnvelope
    set?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    disconnect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    delete?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    connect?: ProduitWhereUniqueInput | ProduitWhereUniqueInput[]
    update?: ProduitUpdateWithWhereUniqueWithoutSousCategorieInput | ProduitUpdateWithWhereUniqueWithoutSousCategorieInput[]
    updateMany?: ProduitUpdateManyWithWhereWithoutSousCategorieInput | ProduitUpdateManyWithWhereWithoutSousCategorieInput[]
    deleteMany?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
  }

  export type SousCategorieCreateNestedOneWithoutProduitsInput = {
    create?: XOR<SousCategorieCreateWithoutProduitsInput, SousCategorieUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: SousCategorieCreateOrConnectWithoutProduitsInput
    connect?: SousCategorieWhereUniqueInput
  }

  export type CommandeProduitCreateNestedManyWithoutProduitInput = {
    create?: XOR<CommandeProduitCreateWithoutProduitInput, CommandeProduitUncheckedCreateWithoutProduitInput> | CommandeProduitCreateWithoutProduitInput[] | CommandeProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: CommandeProduitCreateOrConnectWithoutProduitInput | CommandeProduitCreateOrConnectWithoutProduitInput[]
    createMany?: CommandeProduitCreateManyProduitInputEnvelope
    connect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
  }

  export type CommandeProduitUncheckedCreateNestedManyWithoutProduitInput = {
    create?: XOR<CommandeProduitCreateWithoutProduitInput, CommandeProduitUncheckedCreateWithoutProduitInput> | CommandeProduitCreateWithoutProduitInput[] | CommandeProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: CommandeProduitCreateOrConnectWithoutProduitInput | CommandeProduitCreateOrConnectWithoutProduitInput[]
    createMany?: CommandeProduitCreateManyProduitInputEnvelope
    connect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SousCategorieUpdateOneRequiredWithoutProduitsNestedInput = {
    create?: XOR<SousCategorieCreateWithoutProduitsInput, SousCategorieUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: SousCategorieCreateOrConnectWithoutProduitsInput
    upsert?: SousCategorieUpsertWithoutProduitsInput
    connect?: SousCategorieWhereUniqueInput
    update?: XOR<XOR<SousCategorieUpdateToOneWithWhereWithoutProduitsInput, SousCategorieUpdateWithoutProduitsInput>, SousCategorieUncheckedUpdateWithoutProduitsInput>
  }

  export type CommandeProduitUpdateManyWithoutProduitNestedInput = {
    create?: XOR<CommandeProduitCreateWithoutProduitInput, CommandeProduitUncheckedCreateWithoutProduitInput> | CommandeProduitCreateWithoutProduitInput[] | CommandeProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: CommandeProduitCreateOrConnectWithoutProduitInput | CommandeProduitCreateOrConnectWithoutProduitInput[]
    upsert?: CommandeProduitUpsertWithWhereUniqueWithoutProduitInput | CommandeProduitUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: CommandeProduitCreateManyProduitInputEnvelope
    set?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    disconnect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    delete?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    connect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    update?: CommandeProduitUpdateWithWhereUniqueWithoutProduitInput | CommandeProduitUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: CommandeProduitUpdateManyWithWhereWithoutProduitInput | CommandeProduitUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: CommandeProduitScalarWhereInput | CommandeProduitScalarWhereInput[]
  }

  export type CommandeProduitUncheckedUpdateManyWithoutProduitNestedInput = {
    create?: XOR<CommandeProduitCreateWithoutProduitInput, CommandeProduitUncheckedCreateWithoutProduitInput> | CommandeProduitCreateWithoutProduitInput[] | CommandeProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: CommandeProduitCreateOrConnectWithoutProduitInput | CommandeProduitCreateOrConnectWithoutProduitInput[]
    upsert?: CommandeProduitUpsertWithWhereUniqueWithoutProduitInput | CommandeProduitUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: CommandeProduitCreateManyProduitInputEnvelope
    set?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    disconnect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    delete?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    connect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    update?: CommandeProduitUpdateWithWhereUniqueWithoutProduitInput | CommandeProduitUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: CommandeProduitUpdateManyWithWhereWithoutProduitInput | CommandeProduitUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: CommandeProduitScalarWhereInput | CommandeProduitScalarWhereInput[]
  }

  export type CommandeFournisseurCreateNestedManyWithoutFournisseurInput = {
    create?: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput> | CommandeFournisseurCreateWithoutFournisseurInput[] | CommandeFournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutFournisseurInput | CommandeFournisseurCreateOrConnectWithoutFournisseurInput[]
    createMany?: CommandeFournisseurCreateManyFournisseurInputEnvelope
    connect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
  }

  export type CommandeFournisseurUncheckedCreateNestedManyWithoutFournisseurInput = {
    create?: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput> | CommandeFournisseurCreateWithoutFournisseurInput[] | CommandeFournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutFournisseurInput | CommandeFournisseurCreateOrConnectWithoutFournisseurInput[]
    createMany?: CommandeFournisseurCreateManyFournisseurInputEnvelope
    connect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
  }

  export type CommandeFournisseurUpdateManyWithoutFournisseurNestedInput = {
    create?: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput> | CommandeFournisseurCreateWithoutFournisseurInput[] | CommandeFournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutFournisseurInput | CommandeFournisseurCreateOrConnectWithoutFournisseurInput[]
    upsert?: CommandeFournisseurUpsertWithWhereUniqueWithoutFournisseurInput | CommandeFournisseurUpsertWithWhereUniqueWithoutFournisseurInput[]
    createMany?: CommandeFournisseurCreateManyFournisseurInputEnvelope
    set?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    disconnect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    delete?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    connect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    update?: CommandeFournisseurUpdateWithWhereUniqueWithoutFournisseurInput | CommandeFournisseurUpdateWithWhereUniqueWithoutFournisseurInput[]
    updateMany?: CommandeFournisseurUpdateManyWithWhereWithoutFournisseurInput | CommandeFournisseurUpdateManyWithWhereWithoutFournisseurInput[]
    deleteMany?: CommandeFournisseurScalarWhereInput | CommandeFournisseurScalarWhereInput[]
  }

  export type CommandeFournisseurUncheckedUpdateManyWithoutFournisseurNestedInput = {
    create?: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput> | CommandeFournisseurCreateWithoutFournisseurInput[] | CommandeFournisseurUncheckedCreateWithoutFournisseurInput[]
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutFournisseurInput | CommandeFournisseurCreateOrConnectWithoutFournisseurInput[]
    upsert?: CommandeFournisseurUpsertWithWhereUniqueWithoutFournisseurInput | CommandeFournisseurUpsertWithWhereUniqueWithoutFournisseurInput[]
    createMany?: CommandeFournisseurCreateManyFournisseurInputEnvelope
    set?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    disconnect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    delete?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    connect?: CommandeFournisseurWhereUniqueInput | CommandeFournisseurWhereUniqueInput[]
    update?: CommandeFournisseurUpdateWithWhereUniqueWithoutFournisseurInput | CommandeFournisseurUpdateWithWhereUniqueWithoutFournisseurInput[]
    updateMany?: CommandeFournisseurUpdateManyWithWhereWithoutFournisseurInput | CommandeFournisseurUpdateManyWithWhereWithoutFournisseurInput[]
    deleteMany?: CommandeFournisseurScalarWhereInput | CommandeFournisseurScalarWhereInput[]
  }

  export type FournisseurCreateNestedOneWithoutCommandesInput = {
    create?: XOR<FournisseurCreateWithoutCommandesInput, FournisseurUncheckedCreateWithoutCommandesInput>
    connectOrCreate?: FournisseurCreateOrConnectWithoutCommandesInput
    connect?: FournisseurWhereUniqueInput
  }

  export type CommandeProduitCreateNestedManyWithoutCommandeInput = {
    create?: XOR<CommandeProduitCreateWithoutCommandeInput, CommandeProduitUncheckedCreateWithoutCommandeInput> | CommandeProduitCreateWithoutCommandeInput[] | CommandeProduitUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: CommandeProduitCreateOrConnectWithoutCommandeInput | CommandeProduitCreateOrConnectWithoutCommandeInput[]
    createMany?: CommandeProduitCreateManyCommandeInputEnvelope
    connect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
  }

  export type PaiementCreateNestedManyWithoutCommandeInput = {
    create?: XOR<PaiementCreateWithoutCommandeInput, PaiementUncheckedCreateWithoutCommandeInput> | PaiementCreateWithoutCommandeInput[] | PaiementUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutCommandeInput | PaiementCreateOrConnectWithoutCommandeInput[]
    createMany?: PaiementCreateManyCommandeInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type CommandeProduitUncheckedCreateNestedManyWithoutCommandeInput = {
    create?: XOR<CommandeProduitCreateWithoutCommandeInput, CommandeProduitUncheckedCreateWithoutCommandeInput> | CommandeProduitCreateWithoutCommandeInput[] | CommandeProduitUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: CommandeProduitCreateOrConnectWithoutCommandeInput | CommandeProduitCreateOrConnectWithoutCommandeInput[]
    createMany?: CommandeProduitCreateManyCommandeInputEnvelope
    connect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
  }

  export type PaiementUncheckedCreateNestedManyWithoutCommandeInput = {
    create?: XOR<PaiementCreateWithoutCommandeInput, PaiementUncheckedCreateWithoutCommandeInput> | PaiementCreateWithoutCommandeInput[] | PaiementUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutCommandeInput | PaiementCreateOrConnectWithoutCommandeInput[]
    createMany?: PaiementCreateManyCommandeInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumStatutCommandeFieldUpdateOperationsInput = {
    set?: $Enums.StatutCommande
  }

  export type FournisseurUpdateOneRequiredWithoutCommandesNestedInput = {
    create?: XOR<FournisseurCreateWithoutCommandesInput, FournisseurUncheckedCreateWithoutCommandesInput>
    connectOrCreate?: FournisseurCreateOrConnectWithoutCommandesInput
    upsert?: FournisseurUpsertWithoutCommandesInput
    connect?: FournisseurWhereUniqueInput
    update?: XOR<XOR<FournisseurUpdateToOneWithWhereWithoutCommandesInput, FournisseurUpdateWithoutCommandesInput>, FournisseurUncheckedUpdateWithoutCommandesInput>
  }

  export type CommandeProduitUpdateManyWithoutCommandeNestedInput = {
    create?: XOR<CommandeProduitCreateWithoutCommandeInput, CommandeProduitUncheckedCreateWithoutCommandeInput> | CommandeProduitCreateWithoutCommandeInput[] | CommandeProduitUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: CommandeProduitCreateOrConnectWithoutCommandeInput | CommandeProduitCreateOrConnectWithoutCommandeInput[]
    upsert?: CommandeProduitUpsertWithWhereUniqueWithoutCommandeInput | CommandeProduitUpsertWithWhereUniqueWithoutCommandeInput[]
    createMany?: CommandeProduitCreateManyCommandeInputEnvelope
    set?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    disconnect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    delete?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    connect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    update?: CommandeProduitUpdateWithWhereUniqueWithoutCommandeInput | CommandeProduitUpdateWithWhereUniqueWithoutCommandeInput[]
    updateMany?: CommandeProduitUpdateManyWithWhereWithoutCommandeInput | CommandeProduitUpdateManyWithWhereWithoutCommandeInput[]
    deleteMany?: CommandeProduitScalarWhereInput | CommandeProduitScalarWhereInput[]
  }

  export type PaiementUpdateManyWithoutCommandeNestedInput = {
    create?: XOR<PaiementCreateWithoutCommandeInput, PaiementUncheckedCreateWithoutCommandeInput> | PaiementCreateWithoutCommandeInput[] | PaiementUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutCommandeInput | PaiementCreateOrConnectWithoutCommandeInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutCommandeInput | PaiementUpsertWithWhereUniqueWithoutCommandeInput[]
    createMany?: PaiementCreateManyCommandeInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutCommandeInput | PaiementUpdateWithWhereUniqueWithoutCommandeInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutCommandeInput | PaiementUpdateManyWithWhereWithoutCommandeInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type CommandeProduitUncheckedUpdateManyWithoutCommandeNestedInput = {
    create?: XOR<CommandeProduitCreateWithoutCommandeInput, CommandeProduitUncheckedCreateWithoutCommandeInput> | CommandeProduitCreateWithoutCommandeInput[] | CommandeProduitUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: CommandeProduitCreateOrConnectWithoutCommandeInput | CommandeProduitCreateOrConnectWithoutCommandeInput[]
    upsert?: CommandeProduitUpsertWithWhereUniqueWithoutCommandeInput | CommandeProduitUpsertWithWhereUniqueWithoutCommandeInput[]
    createMany?: CommandeProduitCreateManyCommandeInputEnvelope
    set?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    disconnect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    delete?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    connect?: CommandeProduitWhereUniqueInput | CommandeProduitWhereUniqueInput[]
    update?: CommandeProduitUpdateWithWhereUniqueWithoutCommandeInput | CommandeProduitUpdateWithWhereUniqueWithoutCommandeInput[]
    updateMany?: CommandeProduitUpdateManyWithWhereWithoutCommandeInput | CommandeProduitUpdateManyWithWhereWithoutCommandeInput[]
    deleteMany?: CommandeProduitScalarWhereInput | CommandeProduitScalarWhereInput[]
  }

  export type PaiementUncheckedUpdateManyWithoutCommandeNestedInput = {
    create?: XOR<PaiementCreateWithoutCommandeInput, PaiementUncheckedCreateWithoutCommandeInput> | PaiementCreateWithoutCommandeInput[] | PaiementUncheckedCreateWithoutCommandeInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutCommandeInput | PaiementCreateOrConnectWithoutCommandeInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutCommandeInput | PaiementUpsertWithWhereUniqueWithoutCommandeInput[]
    createMany?: PaiementCreateManyCommandeInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutCommandeInput | PaiementUpdateWithWhereUniqueWithoutCommandeInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutCommandeInput | PaiementUpdateManyWithWhereWithoutCommandeInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type CommandeFournisseurCreateNestedOneWithoutProduitsInput = {
    create?: XOR<CommandeFournisseurCreateWithoutProduitsInput, CommandeFournisseurUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutProduitsInput
    connect?: CommandeFournisseurWhereUniqueInput
  }

  export type ProduitCreateNestedOneWithoutCommandesInput = {
    create?: XOR<ProduitCreateWithoutCommandesInput, ProduitUncheckedCreateWithoutCommandesInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutCommandesInput
    connect?: ProduitWhereUniqueInput
  }

  export type CommandeFournisseurUpdateOneRequiredWithoutProduitsNestedInput = {
    create?: XOR<CommandeFournisseurCreateWithoutProduitsInput, CommandeFournisseurUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutProduitsInput
    upsert?: CommandeFournisseurUpsertWithoutProduitsInput
    connect?: CommandeFournisseurWhereUniqueInput
    update?: XOR<XOR<CommandeFournisseurUpdateToOneWithWhereWithoutProduitsInput, CommandeFournisseurUpdateWithoutProduitsInput>, CommandeFournisseurUncheckedUpdateWithoutProduitsInput>
  }

  export type ProduitUpdateOneRequiredWithoutCommandesNestedInput = {
    create?: XOR<ProduitCreateWithoutCommandesInput, ProduitUncheckedCreateWithoutCommandesInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutCommandesInput
    upsert?: ProduitUpsertWithoutCommandesInput
    connect?: ProduitWhereUniqueInput
    update?: XOR<XOR<ProduitUpdateToOneWithWhereWithoutCommandesInput, ProduitUpdateWithoutCommandesInput>, ProduitUncheckedUpdateWithoutCommandesInput>
  }

  export type CommandeFournisseurCreateNestedOneWithoutPaiementsInput = {
    create?: XOR<CommandeFournisseurCreateWithoutPaiementsInput, CommandeFournisseurUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutPaiementsInput
    connect?: CommandeFournisseurWhereUniqueInput
  }

  export type CommandeFournisseurUpdateOneRequiredWithoutPaiementsNestedInput = {
    create?: XOR<CommandeFournisseurCreateWithoutPaiementsInput, CommandeFournisseurUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: CommandeFournisseurCreateOrConnectWithoutPaiementsInput
    upsert?: CommandeFournisseurUpsertWithoutPaiementsInput
    connect?: CommandeFournisseurWhereUniqueInput
    update?: XOR<XOR<CommandeFournisseurUpdateToOneWithWhereWithoutPaiementsInput, CommandeFournisseurUpdateWithoutPaiementsInput>, CommandeFournisseurUncheckedUpdateWithoutPaiementsInput>
  }

  export type EnumRoleUtilisateurFieldUpdateOperationsInput = {
    set?: $Enums.RoleUtilisateur
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumStatutCommandeFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutCommande | EnumStatutCommandeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutCommande[] | ListEnumStatutCommandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutCommande[] | ListEnumStatutCommandeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutCommandeFilter<$PrismaModel> | $Enums.StatutCommande
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumStatutCommandeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutCommande | EnumStatutCommandeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutCommande[] | ListEnumStatutCommandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutCommande[] | ListEnumStatutCommandeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutCommandeWithAggregatesFilter<$PrismaModel> | $Enums.StatutCommande
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutCommandeFilter<$PrismaModel>
    _max?: NestedEnumStatutCommandeFilter<$PrismaModel>
  }

  export type NestedEnumRoleUtilisateurFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleUtilisateur | EnumRoleUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.RoleUtilisateur[] | ListEnumRoleUtilisateurFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleUtilisateur[] | ListEnumRoleUtilisateurFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleUtilisateurFilter<$PrismaModel> | $Enums.RoleUtilisateur
  }

  export type NestedEnumRoleUtilisateurWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleUtilisateur | EnumRoleUtilisateurFieldRefInput<$PrismaModel>
    in?: $Enums.RoleUtilisateur[] | ListEnumRoleUtilisateurFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleUtilisateur[] | ListEnumRoleUtilisateurFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleUtilisateurWithAggregatesFilter<$PrismaModel> | $Enums.RoleUtilisateur
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleUtilisateurFilter<$PrismaModel>
    _max?: NestedEnumRoleUtilisateurFilter<$PrismaModel>
  }

  export type SousCategorieCreateWithoutCategorieInput = {
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
    produits?: ProduitCreateNestedManyWithoutSousCategorieInput
  }

  export type SousCategorieUncheckedCreateWithoutCategorieInput = {
    id?: number
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
    produits?: ProduitUncheckedCreateNestedManyWithoutSousCategorieInput
  }

  export type SousCategorieCreateOrConnectWithoutCategorieInput = {
    where: SousCategorieWhereUniqueInput
    create: XOR<SousCategorieCreateWithoutCategorieInput, SousCategorieUncheckedCreateWithoutCategorieInput>
  }

  export type SousCategorieCreateManyCategorieInputEnvelope = {
    data: SousCategorieCreateManyCategorieInput | SousCategorieCreateManyCategorieInput[]
    skipDuplicates?: boolean
  }

  export type SousCategorieUpsertWithWhereUniqueWithoutCategorieInput = {
    where: SousCategorieWhereUniqueInput
    update: XOR<SousCategorieUpdateWithoutCategorieInput, SousCategorieUncheckedUpdateWithoutCategorieInput>
    create: XOR<SousCategorieCreateWithoutCategorieInput, SousCategorieUncheckedCreateWithoutCategorieInput>
  }

  export type SousCategorieUpdateWithWhereUniqueWithoutCategorieInput = {
    where: SousCategorieWhereUniqueInput
    data: XOR<SousCategorieUpdateWithoutCategorieInput, SousCategorieUncheckedUpdateWithoutCategorieInput>
  }

  export type SousCategorieUpdateManyWithWhereWithoutCategorieInput = {
    where: SousCategorieScalarWhereInput
    data: XOR<SousCategorieUpdateManyMutationInput, SousCategorieUncheckedUpdateManyWithoutCategorieInput>
  }

  export type SousCategorieScalarWhereInput = {
    AND?: SousCategorieScalarWhereInput | SousCategorieScalarWhereInput[]
    OR?: SousCategorieScalarWhereInput[]
    NOT?: SousCategorieScalarWhereInput | SousCategorieScalarWhereInput[]
    id?: IntFilter<"SousCategorie"> | number
    nom?: StringFilter<"SousCategorie"> | string
    description?: StringNullableFilter<"SousCategorie"> | string | null
    deletedAt?: DateTimeNullableFilter<"SousCategorie"> | Date | string | null
    categorieId?: IntFilter<"SousCategorie"> | number
  }

  export type CategorieCreateWithoutSousCategoriesInput = {
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
  }

  export type CategorieUncheckedCreateWithoutSousCategoriesInput = {
    id?: number
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
  }

  export type CategorieCreateOrConnectWithoutSousCategoriesInput = {
    where: CategorieWhereUniqueInput
    create: XOR<CategorieCreateWithoutSousCategoriesInput, CategorieUncheckedCreateWithoutSousCategoriesInput>
  }

  export type ProduitCreateWithoutSousCategorieInput = {
    code: string
    designation: string
    stock: number
    prixUnitaire: number
    image?: string | null
    deletedAt?: Date | string | null
    commandes?: CommandeProduitCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateWithoutSousCategorieInput = {
    id?: number
    code: string
    designation: string
    stock: number
    prixUnitaire: number
    image?: string | null
    deletedAt?: Date | string | null
    commandes?: CommandeProduitUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitCreateOrConnectWithoutSousCategorieInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutSousCategorieInput, ProduitUncheckedCreateWithoutSousCategorieInput>
  }

  export type ProduitCreateManySousCategorieInputEnvelope = {
    data: ProduitCreateManySousCategorieInput | ProduitCreateManySousCategorieInput[]
    skipDuplicates?: boolean
  }

  export type CategorieUpsertWithoutSousCategoriesInput = {
    update: XOR<CategorieUpdateWithoutSousCategoriesInput, CategorieUncheckedUpdateWithoutSousCategoriesInput>
    create: XOR<CategorieCreateWithoutSousCategoriesInput, CategorieUncheckedCreateWithoutSousCategoriesInput>
    where?: CategorieWhereInput
  }

  export type CategorieUpdateToOneWithWhereWithoutSousCategoriesInput = {
    where?: CategorieWhereInput
    data: XOR<CategorieUpdateWithoutSousCategoriesInput, CategorieUncheckedUpdateWithoutSousCategoriesInput>
  }

  export type CategorieUpdateWithoutSousCategoriesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategorieUncheckedUpdateWithoutSousCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProduitUpsertWithWhereUniqueWithoutSousCategorieInput = {
    where: ProduitWhereUniqueInput
    update: XOR<ProduitUpdateWithoutSousCategorieInput, ProduitUncheckedUpdateWithoutSousCategorieInput>
    create: XOR<ProduitCreateWithoutSousCategorieInput, ProduitUncheckedCreateWithoutSousCategorieInput>
  }

  export type ProduitUpdateWithWhereUniqueWithoutSousCategorieInput = {
    where: ProduitWhereUniqueInput
    data: XOR<ProduitUpdateWithoutSousCategorieInput, ProduitUncheckedUpdateWithoutSousCategorieInput>
  }

  export type ProduitUpdateManyWithWhereWithoutSousCategorieInput = {
    where: ProduitScalarWhereInput
    data: XOR<ProduitUpdateManyMutationInput, ProduitUncheckedUpdateManyWithoutSousCategorieInput>
  }

  export type ProduitScalarWhereInput = {
    AND?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
    OR?: ProduitScalarWhereInput[]
    NOT?: ProduitScalarWhereInput | ProduitScalarWhereInput[]
    id?: IntFilter<"Produit"> | number
    code?: StringFilter<"Produit"> | string
    designation?: StringFilter<"Produit"> | string
    stock?: IntFilter<"Produit"> | number
    prixUnitaire?: FloatFilter<"Produit"> | number
    image?: StringNullableFilter<"Produit"> | string | null
    deletedAt?: DateTimeNullableFilter<"Produit"> | Date | string | null
    sousCategorieId?: IntFilter<"Produit"> | number
  }

  export type SousCategorieCreateWithoutProduitsInput = {
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
    categorie: CategorieCreateNestedOneWithoutSousCategoriesInput
  }

  export type SousCategorieUncheckedCreateWithoutProduitsInput = {
    id?: number
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
    categorieId: number
  }

  export type SousCategorieCreateOrConnectWithoutProduitsInput = {
    where: SousCategorieWhereUniqueInput
    create: XOR<SousCategorieCreateWithoutProduitsInput, SousCategorieUncheckedCreateWithoutProduitsInput>
  }

  export type CommandeProduitCreateWithoutProduitInput = {
    quantite: number
    prixAchat: number
    commande: CommandeFournisseurCreateNestedOneWithoutProduitsInput
  }

  export type CommandeProduitUncheckedCreateWithoutProduitInput = {
    id?: number
    commandeId: number
    quantite: number
    prixAchat: number
  }

  export type CommandeProduitCreateOrConnectWithoutProduitInput = {
    where: CommandeProduitWhereUniqueInput
    create: XOR<CommandeProduitCreateWithoutProduitInput, CommandeProduitUncheckedCreateWithoutProduitInput>
  }

  export type CommandeProduitCreateManyProduitInputEnvelope = {
    data: CommandeProduitCreateManyProduitInput | CommandeProduitCreateManyProduitInput[]
    skipDuplicates?: boolean
  }

  export type SousCategorieUpsertWithoutProduitsInput = {
    update: XOR<SousCategorieUpdateWithoutProduitsInput, SousCategorieUncheckedUpdateWithoutProduitsInput>
    create: XOR<SousCategorieCreateWithoutProduitsInput, SousCategorieUncheckedCreateWithoutProduitsInput>
    where?: SousCategorieWhereInput
  }

  export type SousCategorieUpdateToOneWithWhereWithoutProduitsInput = {
    where?: SousCategorieWhereInput
    data: XOR<SousCategorieUpdateWithoutProduitsInput, SousCategorieUncheckedUpdateWithoutProduitsInput>
  }

  export type SousCategorieUpdateWithoutProduitsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categorie?: CategorieUpdateOneRequiredWithoutSousCategoriesNestedInput
  }

  export type SousCategorieUncheckedUpdateWithoutProduitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categorieId?: IntFieldUpdateOperationsInput | number
  }

  export type CommandeProduitUpsertWithWhereUniqueWithoutProduitInput = {
    where: CommandeProduitWhereUniqueInput
    update: XOR<CommandeProduitUpdateWithoutProduitInput, CommandeProduitUncheckedUpdateWithoutProduitInput>
    create: XOR<CommandeProduitCreateWithoutProduitInput, CommandeProduitUncheckedCreateWithoutProduitInput>
  }

  export type CommandeProduitUpdateWithWhereUniqueWithoutProduitInput = {
    where: CommandeProduitWhereUniqueInput
    data: XOR<CommandeProduitUpdateWithoutProduitInput, CommandeProduitUncheckedUpdateWithoutProduitInput>
  }

  export type CommandeProduitUpdateManyWithWhereWithoutProduitInput = {
    where: CommandeProduitScalarWhereInput
    data: XOR<CommandeProduitUpdateManyMutationInput, CommandeProduitUncheckedUpdateManyWithoutProduitInput>
  }

  export type CommandeProduitScalarWhereInput = {
    AND?: CommandeProduitScalarWhereInput | CommandeProduitScalarWhereInput[]
    OR?: CommandeProduitScalarWhereInput[]
    NOT?: CommandeProduitScalarWhereInput | CommandeProduitScalarWhereInput[]
    id?: IntFilter<"CommandeProduit"> | number
    commandeId?: IntFilter<"CommandeProduit"> | number
    produitId?: IntFilter<"CommandeProduit"> | number
    quantite?: IntFilter<"CommandeProduit"> | number
    prixAchat?: FloatFilter<"CommandeProduit"> | number
  }

  export type CommandeFournisseurCreateWithoutFournisseurInput = {
    dateCommande: Date | string
    montantTotal: number
    dateLivraisonPrevue?: Date | string | null
    dateLivraisonReelle?: Date | string | null
    statut: $Enums.StatutCommande
    produits?: CommandeProduitCreateNestedManyWithoutCommandeInput
    paiements?: PaiementCreateNestedManyWithoutCommandeInput
  }

  export type CommandeFournisseurUncheckedCreateWithoutFournisseurInput = {
    id?: number
    dateCommande: Date | string
    montantTotal: number
    dateLivraisonPrevue?: Date | string | null
    dateLivraisonReelle?: Date | string | null
    statut: $Enums.StatutCommande
    produits?: CommandeProduitUncheckedCreateNestedManyWithoutCommandeInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutCommandeInput
  }

  export type CommandeFournisseurCreateOrConnectWithoutFournisseurInput = {
    where: CommandeFournisseurWhereUniqueInput
    create: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput>
  }

  export type CommandeFournisseurCreateManyFournisseurInputEnvelope = {
    data: CommandeFournisseurCreateManyFournisseurInput | CommandeFournisseurCreateManyFournisseurInput[]
    skipDuplicates?: boolean
  }

  export type CommandeFournisseurUpsertWithWhereUniqueWithoutFournisseurInput = {
    where: CommandeFournisseurWhereUniqueInput
    update: XOR<CommandeFournisseurUpdateWithoutFournisseurInput, CommandeFournisseurUncheckedUpdateWithoutFournisseurInput>
    create: XOR<CommandeFournisseurCreateWithoutFournisseurInput, CommandeFournisseurUncheckedCreateWithoutFournisseurInput>
  }

  export type CommandeFournisseurUpdateWithWhereUniqueWithoutFournisseurInput = {
    where: CommandeFournisseurWhereUniqueInput
    data: XOR<CommandeFournisseurUpdateWithoutFournisseurInput, CommandeFournisseurUncheckedUpdateWithoutFournisseurInput>
  }

  export type CommandeFournisseurUpdateManyWithWhereWithoutFournisseurInput = {
    where: CommandeFournisseurScalarWhereInput
    data: XOR<CommandeFournisseurUpdateManyMutationInput, CommandeFournisseurUncheckedUpdateManyWithoutFournisseurInput>
  }

  export type CommandeFournisseurScalarWhereInput = {
    AND?: CommandeFournisseurScalarWhereInput | CommandeFournisseurScalarWhereInput[]
    OR?: CommandeFournisseurScalarWhereInput[]
    NOT?: CommandeFournisseurScalarWhereInput | CommandeFournisseurScalarWhereInput[]
    id?: IntFilter<"CommandeFournisseur"> | number
    dateCommande?: DateTimeFilter<"CommandeFournisseur"> | Date | string
    montantTotal?: FloatFilter<"CommandeFournisseur"> | number
    dateLivraisonPrevue?: DateTimeNullableFilter<"CommandeFournisseur"> | Date | string | null
    dateLivraisonReelle?: DateTimeNullableFilter<"CommandeFournisseur"> | Date | string | null
    statut?: EnumStatutCommandeFilter<"CommandeFournisseur"> | $Enums.StatutCommande
    fournisseurId?: IntFilter<"CommandeFournisseur"> | number
  }

  export type FournisseurCreateWithoutCommandesInput = {
    numero: string
    nom: string
    adresse: string
    deletedAt?: Date | string | null
  }

  export type FournisseurUncheckedCreateWithoutCommandesInput = {
    id?: number
    numero: string
    nom: string
    adresse: string
    deletedAt?: Date | string | null
  }

  export type FournisseurCreateOrConnectWithoutCommandesInput = {
    where: FournisseurWhereUniqueInput
    create: XOR<FournisseurCreateWithoutCommandesInput, FournisseurUncheckedCreateWithoutCommandesInput>
  }

  export type CommandeProduitCreateWithoutCommandeInput = {
    quantite: number
    prixAchat: number
    produit: ProduitCreateNestedOneWithoutCommandesInput
  }

  export type CommandeProduitUncheckedCreateWithoutCommandeInput = {
    id?: number
    produitId: number
    quantite: number
    prixAchat: number
  }

  export type CommandeProduitCreateOrConnectWithoutCommandeInput = {
    where: CommandeProduitWhereUniqueInput
    create: XOR<CommandeProduitCreateWithoutCommandeInput, CommandeProduitUncheckedCreateWithoutCommandeInput>
  }

  export type CommandeProduitCreateManyCommandeInputEnvelope = {
    data: CommandeProduitCreateManyCommandeInput | CommandeProduitCreateManyCommandeInput[]
    skipDuplicates?: boolean
  }

  export type PaiementCreateWithoutCommandeInput = {
    numeroVersement: string
    montant: number
    dateVersement: Date | string
  }

  export type PaiementUncheckedCreateWithoutCommandeInput = {
    id?: number
    numeroVersement: string
    montant: number
    dateVersement: Date | string
  }

  export type PaiementCreateOrConnectWithoutCommandeInput = {
    where: PaiementWhereUniqueInput
    create: XOR<PaiementCreateWithoutCommandeInput, PaiementUncheckedCreateWithoutCommandeInput>
  }

  export type PaiementCreateManyCommandeInputEnvelope = {
    data: PaiementCreateManyCommandeInput | PaiementCreateManyCommandeInput[]
    skipDuplicates?: boolean
  }

  export type FournisseurUpsertWithoutCommandesInput = {
    update: XOR<FournisseurUpdateWithoutCommandesInput, FournisseurUncheckedUpdateWithoutCommandesInput>
    create: XOR<FournisseurCreateWithoutCommandesInput, FournisseurUncheckedCreateWithoutCommandesInput>
    where?: FournisseurWhereInput
  }

  export type FournisseurUpdateToOneWithWhereWithoutCommandesInput = {
    where?: FournisseurWhereInput
    data: XOR<FournisseurUpdateWithoutCommandesInput, FournisseurUncheckedUpdateWithoutCommandesInput>
  }

  export type FournisseurUpdateWithoutCommandesInput = {
    numero?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FournisseurUncheckedUpdateWithoutCommandesInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CommandeProduitUpsertWithWhereUniqueWithoutCommandeInput = {
    where: CommandeProduitWhereUniqueInput
    update: XOR<CommandeProduitUpdateWithoutCommandeInput, CommandeProduitUncheckedUpdateWithoutCommandeInput>
    create: XOR<CommandeProduitCreateWithoutCommandeInput, CommandeProduitUncheckedCreateWithoutCommandeInput>
  }

  export type CommandeProduitUpdateWithWhereUniqueWithoutCommandeInput = {
    where: CommandeProduitWhereUniqueInput
    data: XOR<CommandeProduitUpdateWithoutCommandeInput, CommandeProduitUncheckedUpdateWithoutCommandeInput>
  }

  export type CommandeProduitUpdateManyWithWhereWithoutCommandeInput = {
    where: CommandeProduitScalarWhereInput
    data: XOR<CommandeProduitUpdateManyMutationInput, CommandeProduitUncheckedUpdateManyWithoutCommandeInput>
  }

  export type PaiementUpsertWithWhereUniqueWithoutCommandeInput = {
    where: PaiementWhereUniqueInput
    update: XOR<PaiementUpdateWithoutCommandeInput, PaiementUncheckedUpdateWithoutCommandeInput>
    create: XOR<PaiementCreateWithoutCommandeInput, PaiementUncheckedCreateWithoutCommandeInput>
  }

  export type PaiementUpdateWithWhereUniqueWithoutCommandeInput = {
    where: PaiementWhereUniqueInput
    data: XOR<PaiementUpdateWithoutCommandeInput, PaiementUncheckedUpdateWithoutCommandeInput>
  }

  export type PaiementUpdateManyWithWhereWithoutCommandeInput = {
    where: PaiementScalarWhereInput
    data: XOR<PaiementUpdateManyMutationInput, PaiementUncheckedUpdateManyWithoutCommandeInput>
  }

  export type PaiementScalarWhereInput = {
    AND?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
    OR?: PaiementScalarWhereInput[]
    NOT?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
    id?: IntFilter<"Paiement"> | number
    commandeId?: IntFilter<"Paiement"> | number
    numeroVersement?: StringFilter<"Paiement"> | string
    montant?: FloatFilter<"Paiement"> | number
    dateVersement?: DateTimeFilter<"Paiement"> | Date | string
  }

  export type CommandeFournisseurCreateWithoutProduitsInput = {
    dateCommande: Date | string
    montantTotal: number
    dateLivraisonPrevue?: Date | string | null
    dateLivraisonReelle?: Date | string | null
    statut: $Enums.StatutCommande
    fournisseur: FournisseurCreateNestedOneWithoutCommandesInput
    paiements?: PaiementCreateNestedManyWithoutCommandeInput
  }

  export type CommandeFournisseurUncheckedCreateWithoutProduitsInput = {
    id?: number
    dateCommande: Date | string
    montantTotal: number
    dateLivraisonPrevue?: Date | string | null
    dateLivraisonReelle?: Date | string | null
    statut: $Enums.StatutCommande
    fournisseurId: number
    paiements?: PaiementUncheckedCreateNestedManyWithoutCommandeInput
  }

  export type CommandeFournisseurCreateOrConnectWithoutProduitsInput = {
    where: CommandeFournisseurWhereUniqueInput
    create: XOR<CommandeFournisseurCreateWithoutProduitsInput, CommandeFournisseurUncheckedCreateWithoutProduitsInput>
  }

  export type ProduitCreateWithoutCommandesInput = {
    code: string
    designation: string
    stock: number
    prixUnitaire: number
    image?: string | null
    deletedAt?: Date | string | null
    sousCategorie: SousCategorieCreateNestedOneWithoutProduitsInput
  }

  export type ProduitUncheckedCreateWithoutCommandesInput = {
    id?: number
    code: string
    designation: string
    stock: number
    prixUnitaire: number
    image?: string | null
    deletedAt?: Date | string | null
    sousCategorieId: number
  }

  export type ProduitCreateOrConnectWithoutCommandesInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutCommandesInput, ProduitUncheckedCreateWithoutCommandesInput>
  }

  export type CommandeFournisseurUpsertWithoutProduitsInput = {
    update: XOR<CommandeFournisseurUpdateWithoutProduitsInput, CommandeFournisseurUncheckedUpdateWithoutProduitsInput>
    create: XOR<CommandeFournisseurCreateWithoutProduitsInput, CommandeFournisseurUncheckedCreateWithoutProduitsInput>
    where?: CommandeFournisseurWhereInput
  }

  export type CommandeFournisseurUpdateToOneWithWhereWithoutProduitsInput = {
    where?: CommandeFournisseurWhereInput
    data: XOR<CommandeFournisseurUpdateWithoutProduitsInput, CommandeFournisseurUncheckedUpdateWithoutProduitsInput>
  }

  export type CommandeFournisseurUpdateWithoutProduitsInput = {
    dateCommande?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    dateLivraisonPrevue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLivraisonReelle?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statut?: EnumStatutCommandeFieldUpdateOperationsInput | $Enums.StatutCommande
    fournisseur?: FournisseurUpdateOneRequiredWithoutCommandesNestedInput
    paiements?: PaiementUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeFournisseurUncheckedUpdateWithoutProduitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCommande?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    dateLivraisonPrevue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLivraisonReelle?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statut?: EnumStatutCommandeFieldUpdateOperationsInput | $Enums.StatutCommande
    fournisseurId?: IntFieldUpdateOperationsInput | number
    paiements?: PaiementUncheckedUpdateManyWithoutCommandeNestedInput
  }

  export type ProduitUpsertWithoutCommandesInput = {
    update: XOR<ProduitUpdateWithoutCommandesInput, ProduitUncheckedUpdateWithoutCommandesInput>
    create: XOR<ProduitCreateWithoutCommandesInput, ProduitUncheckedCreateWithoutCommandesInput>
    where?: ProduitWhereInput
  }

  export type ProduitUpdateToOneWithWhereWithoutCommandesInput = {
    where?: ProduitWhereInput
    data: XOR<ProduitUpdateWithoutCommandesInput, ProduitUncheckedUpdateWithoutCommandesInput>
  }

  export type ProduitUpdateWithoutCommandesInput = {
    code?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sousCategorie?: SousCategorieUpdateOneRequiredWithoutProduitsNestedInput
  }

  export type ProduitUncheckedUpdateWithoutCommandesInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sousCategorieId?: IntFieldUpdateOperationsInput | number
  }

  export type CommandeFournisseurCreateWithoutPaiementsInput = {
    dateCommande: Date | string
    montantTotal: number
    dateLivraisonPrevue?: Date | string | null
    dateLivraisonReelle?: Date | string | null
    statut: $Enums.StatutCommande
    fournisseur: FournisseurCreateNestedOneWithoutCommandesInput
    produits?: CommandeProduitCreateNestedManyWithoutCommandeInput
  }

  export type CommandeFournisseurUncheckedCreateWithoutPaiementsInput = {
    id?: number
    dateCommande: Date | string
    montantTotal: number
    dateLivraisonPrevue?: Date | string | null
    dateLivraisonReelle?: Date | string | null
    statut: $Enums.StatutCommande
    fournisseurId: number
    produits?: CommandeProduitUncheckedCreateNestedManyWithoutCommandeInput
  }

  export type CommandeFournisseurCreateOrConnectWithoutPaiementsInput = {
    where: CommandeFournisseurWhereUniqueInput
    create: XOR<CommandeFournisseurCreateWithoutPaiementsInput, CommandeFournisseurUncheckedCreateWithoutPaiementsInput>
  }

  export type CommandeFournisseurUpsertWithoutPaiementsInput = {
    update: XOR<CommandeFournisseurUpdateWithoutPaiementsInput, CommandeFournisseurUncheckedUpdateWithoutPaiementsInput>
    create: XOR<CommandeFournisseurCreateWithoutPaiementsInput, CommandeFournisseurUncheckedCreateWithoutPaiementsInput>
    where?: CommandeFournisseurWhereInput
  }

  export type CommandeFournisseurUpdateToOneWithWhereWithoutPaiementsInput = {
    where?: CommandeFournisseurWhereInput
    data: XOR<CommandeFournisseurUpdateWithoutPaiementsInput, CommandeFournisseurUncheckedUpdateWithoutPaiementsInput>
  }

  export type CommandeFournisseurUpdateWithoutPaiementsInput = {
    dateCommande?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    dateLivraisonPrevue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLivraisonReelle?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statut?: EnumStatutCommandeFieldUpdateOperationsInput | $Enums.StatutCommande
    fournisseur?: FournisseurUpdateOneRequiredWithoutCommandesNestedInput
    produits?: CommandeProduitUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeFournisseurUncheckedUpdateWithoutPaiementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCommande?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    dateLivraisonPrevue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLivraisonReelle?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statut?: EnumStatutCommandeFieldUpdateOperationsInput | $Enums.StatutCommande
    fournisseurId?: IntFieldUpdateOperationsInput | number
    produits?: CommandeProduitUncheckedUpdateManyWithoutCommandeNestedInput
  }

  export type SousCategorieCreateManyCategorieInput = {
    id?: number
    nom: string
    description?: string | null
    deletedAt?: Date | string | null
  }

  export type SousCategorieUpdateWithoutCategorieInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    produits?: ProduitUpdateManyWithoutSousCategorieNestedInput
  }

  export type SousCategorieUncheckedUpdateWithoutCategorieInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    produits?: ProduitUncheckedUpdateManyWithoutSousCategorieNestedInput
  }

  export type SousCategorieUncheckedUpdateManyWithoutCategorieInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProduitCreateManySousCategorieInput = {
    id?: number
    code: string
    designation: string
    stock: number
    prixUnitaire: number
    image?: string | null
    deletedAt?: Date | string | null
  }

  export type ProduitUpdateWithoutSousCategorieInput = {
    code?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commandes?: CommandeProduitUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateWithoutSousCategorieInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    commandes?: CommandeProduitUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateManyWithoutSousCategorieInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    prixUnitaire?: FloatFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CommandeProduitCreateManyProduitInput = {
    id?: number
    commandeId: number
    quantite: number
    prixAchat: number
  }

  export type CommandeProduitUpdateWithoutProduitInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixAchat?: FloatFieldUpdateOperationsInput | number
    commande?: CommandeFournisseurUpdateOneRequiredWithoutProduitsNestedInput
  }

  export type CommandeProduitUncheckedUpdateWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandeId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixAchat?: FloatFieldUpdateOperationsInput | number
  }

  export type CommandeProduitUncheckedUpdateManyWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandeId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixAchat?: FloatFieldUpdateOperationsInput | number
  }

  export type CommandeFournisseurCreateManyFournisseurInput = {
    id?: number
    dateCommande: Date | string
    montantTotal: number
    dateLivraisonPrevue?: Date | string | null
    dateLivraisonReelle?: Date | string | null
    statut: $Enums.StatutCommande
  }

  export type CommandeFournisseurUpdateWithoutFournisseurInput = {
    dateCommande?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    dateLivraisonPrevue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLivraisonReelle?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statut?: EnumStatutCommandeFieldUpdateOperationsInput | $Enums.StatutCommande
    produits?: CommandeProduitUpdateManyWithoutCommandeNestedInput
    paiements?: PaiementUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeFournisseurUncheckedUpdateWithoutFournisseurInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCommande?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    dateLivraisonPrevue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLivraisonReelle?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statut?: EnumStatutCommandeFieldUpdateOperationsInput | $Enums.StatutCommande
    produits?: CommandeProduitUncheckedUpdateManyWithoutCommandeNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutCommandeNestedInput
  }

  export type CommandeFournisseurUncheckedUpdateManyWithoutFournisseurInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateCommande?: DateTimeFieldUpdateOperationsInput | Date | string
    montantTotal?: FloatFieldUpdateOperationsInput | number
    dateLivraisonPrevue?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLivraisonReelle?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statut?: EnumStatutCommandeFieldUpdateOperationsInput | $Enums.StatutCommande
  }

  export type CommandeProduitCreateManyCommandeInput = {
    id?: number
    produitId: number
    quantite: number
    prixAchat: number
  }

  export type PaiementCreateManyCommandeInput = {
    id?: number
    numeroVersement: string
    montant: number
    dateVersement: Date | string
  }

  export type CommandeProduitUpdateWithoutCommandeInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    prixAchat?: FloatFieldUpdateOperationsInput | number
    produit?: ProduitUpdateOneRequiredWithoutCommandesNestedInput
  }

  export type CommandeProduitUncheckedUpdateWithoutCommandeInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixAchat?: FloatFieldUpdateOperationsInput | number
  }

  export type CommandeProduitUncheckedUpdateManyWithoutCommandeInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    prixAchat?: FloatFieldUpdateOperationsInput | number
  }

  export type PaiementUpdateWithoutCommandeInput = {
    numeroVersement?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    dateVersement?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaiementUncheckedUpdateWithoutCommandeInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroVersement?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    dateVersement?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaiementUncheckedUpdateManyWithoutCommandeInput = {
    id?: IntFieldUpdateOperationsInput | number
    numeroVersement?: StringFieldUpdateOperationsInput | string
    montant?: FloatFieldUpdateOperationsInput | number
    dateVersement?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CategorieCountOutputTypeDefaultArgs instead
     */
    export type CategorieCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategorieCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SousCategorieCountOutputTypeDefaultArgs instead
     */
    export type SousCategorieCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SousCategorieCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProduitCountOutputTypeDefaultArgs instead
     */
    export type ProduitCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProduitCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FournisseurCountOutputTypeDefaultArgs instead
     */
    export type FournisseurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FournisseurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommandeFournisseurCountOutputTypeDefaultArgs instead
     */
    export type CommandeFournisseurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommandeFournisseurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategorieDefaultArgs instead
     */
    export type CategorieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategorieDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SousCategorieDefaultArgs instead
     */
    export type SousCategorieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SousCategorieDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProduitDefaultArgs instead
     */
    export type ProduitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProduitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FournisseurDefaultArgs instead
     */
    export type FournisseurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FournisseurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommandeFournisseurDefaultArgs instead
     */
    export type CommandeFournisseurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommandeFournisseurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommandeProduitDefaultArgs instead
     */
    export type CommandeProduitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommandeProduitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaiementDefaultArgs instead
     */
    export type PaiementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaiementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UtilisateurDefaultArgs instead
     */
    export type UtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilisateurDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}